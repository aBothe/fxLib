/*
 * Mesa 3-D graphics library
 * Version:  6.3
 *
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import std.loader;
public import opengl.glext;
/*
 * Constants
 */
// Boolean values
const ubyte GL_FALSE				= 0x0;
const ubyte GL_TRUE				= 0x1;

// Data types
const uint GL_BYTE				= 0x1400;
const uint GL_UNSIGNED_BYTE			= 0x1401;
const uint GL_SHORT				= 0x1402;
const uint GL_UNSIGNED_SHORT			= 0x1403;
const uint GL_INT				= 0x1404;
const uint GL_UNSIGNED_INT			= 0x1405;
const uint GL_FLOAT				= 0x1406;
const uint GL_DOUBLE				= 0x140A;
const uint GL_2_BYTES				= 0x1407;
const uint GL_3_BYTES				= 0x1408;
const uint GL_4_BYTES				= 0x1409;

// Primitives
const uint GL_POINTS				= 0x0000;
const uint GL_LINES				= 0x0001;
const uint GL_LINE_LOOP			= 0x0002;
const uint GL_LINE_STRIP			= 0x0003;
const uint GL_TRIANGLES			= 0x0004;
const uint GL_TRIANGLE_STRIP			= 0x0005;
const uint GL_TRIANGLE_FAN			= 0x0006;
const uint GL_QUADS				= 0x0007;
const uint GL_QUAD_STRIP			= 0x0008;
const uint GL_POLYGON				= 0x0009;

// Vertex Arrays
const uint GL_VERTEX_ARRAY			= 0x8074;
const uint GL_NORMAL_ARRAY			= 0x8075;
const uint GL_COLOR_ARRAY			= 0x8076;
const uint GL_INDEX_ARRAY			= 0x8077;
const uint GL_TEXTURE_COORD_ARRAY		= 0x8078;
const uint GL_EDGE_FLAG_ARRAY			= 0x8079;
const uint GL_VERTEX_ARRAY_SIZE		= 0x807A;
const uint GL_VERTEX_ARRAY_TYPE		= 0x807B;
const uint GL_VERTEX_ARRAY_STRIDE		= 0x807C;
const uint GL_NORMAL_ARRAY_TYPE		= 0x807E;
const uint GL_NORMAL_ARRAY_STRIDE		= 0x807F;
const uint GL_COLOR_ARRAY_SIZE		= 0x8081;
const uint GL_COLOR_ARRAY_TYPE		= 0x8082;
const uint GL_COLOR_ARRAY_STRIDE		= 0x8083;
const uint GL_INDEX_ARRAY_TYPE		= 0x8085;
const uint GL_INDEX_ARRAY_STRIDE		= 0x8086;
const uint GL_TEXTURE_COORD_ARRAY_SIZE	= 0x8088;
const uint GL_TEXTURE_COORD_ARRAY_TYPE	= 0x8089;
const uint GL_TEXTURE_COORD_ARRAY_STRIDE	= 0x808A;
const uint GL_EDGE_FLAG_ARRAY_STRIDE		= 0x808C;
const uint GL_VERTEX_ARRAY_POINTER		= 0x808E;
const uint GL_NORMAL_ARRAY_POINTER		= 0x808F;
const uint GL_COLOR_ARRAY_POINTER		= 0x8090;
const uint GL_INDEX_ARRAY_POINTER		= 0x8091;
const uint GL_TEXTURE_COORD_ARRAY_POINTER	= 0x8092;
const uint GL_EDGE_FLAG_ARRAY_POINTER		= 0x8093;
const uint GL_V2F				= 0x2A20;
const uint GL_V3F				= 0x2A21;
const uint GL_C4UB_V2F			= 0x2A22;
const uint GL_C4UB_V3F			= 0x2A23;
const uint GL_C3F_V3F				= 0x2A24;
const uint GL_N3F_V3F				= 0x2A25;
const uint GL_C4F_N3F_V3F			= 0x2A26;
const uint GL_T2F_V3F				= 0x2A27;
const uint GL_T4F_V4F				= 0x2A28;
const uint GL_T2F_C4UB_V3F			= 0x2A29;
const uint GL_T2F_C3F_V3F			= 0x2A2A;
const uint GL_T2F_N3F_V3F			= 0x2A2B;
const uint GL_T2F_C4F_N3F_V3F			= 0x2A2C;
const uint GL_T4F_C4F_N3F_V4F			= 0x2A2D;

// Matrix Mode
const uint GL_MATRIX_MODE			= 0x0BA0;
const uint GL_MODELVIEW			= 0x1700;
const uint GL_PROJECTION			= 0x1701;
const uint GL_TEXTURE				= 0x1702;

// Points
const uint GL_POINT_SMOOTH			= 0x0B10;
const uint GL_POINT_SIZE			= 0x0B11;
const uint GL_POINT_SIZE_GRANULARITY		= 0x0B13;
const uint GL_POINT_SIZE_RANGE		= 0x0B12;

// Lines
const uint GL_LINE_SMOOTH			= 0x0B20;
const uint GL_LINE_STIPPLE			= 0x0B24;
const uint GL_LINE_STIPPLE_PATTERN		= 0x0B25;
const uint GL_LINE_STIPPLE_REPEAT		= 0x0B26;
const uint GL_LINE_WIDTH			= 0x0B21;
const uint GL_LINE_WIDTH_GRANULARITY		= 0x0B23;
const uint GL_LINE_WIDTH_RANGE		= 0x0B22;

// Polygons
const uint GL_POINT				= 0x1B00;
const uint GL_LINE				= 0x1B01;
const uint GL_FILL				= 0x1B02;
const uint GL_CW				= 0x0900;
const uint GL_CCW				= 0x0901;
const uint GL_FRONT				= 0x0404;
const uint GL_BACK				= 0x0405;
const uint GL_POLYGON_MODE			= 0x0B40;
const uint GL_POLYGON_SMOOTH			= 0x0B41;
const uint GL_POLYGON_STIPPLE			= 0x0B42;
const uint GL_EDGE_FLAG			= 0x0B43;
const uint GL_CULL_FACE			= 0x0B44;
const uint GL_CULL_FACE_MODE			= 0x0B45;
const uint GL_FRONT_FACE			= 0x0B46;
const uint GL_POLYGON_OFFSET_FACTOR		= 0x8038;
const uint GL_POLYGON_OFFSET_UNITS		= 0x2A00;
const uint GL_POLYGON_OFFSET_POINT		= 0x2A01;
const uint GL_POLYGON_OFFSET_LINE		= 0x2A02;
const uint GL_POLYGON_OFFSET_FILL		= 0x8037;

// Display Lists
const uint GL_COMPILE				= 0x1300;
const uint GL_COMPILE_AND_EXECUTE		= 0x1301;
const uint GL_LIST_BASE			= 0x0B32;
const uint GL_LIST_INDEX			= 0x0B33;
const uint GL_LIST_MODE			= 0x0B30;

// Depth buffer
const uint GL_NEVER				= 0x0200;
const uint GL_LESS				= 0x0201;
const uint GL_EQUAL				= 0x0202;
const uint GL_LEQUAL				= 0x0203;
const uint GL_GREATER				= 0x0204;
const uint GL_NOTEQUAL			= 0x0205;
const uint GL_GEQUAL				= 0x0206;
const uint GL_ALWAYS				= 0x0207;
const uint GL_DEPTH_TEST			= 0x0B71;
const uint GL_DEPTH_BITS			= 0x0D56;
const uint GL_DEPTH_CLEAR_VALUE		= 0x0B73;
const uint GL_DEPTH_FUNC			= 0x0B74;
const uint GL_DEPTH_RANGE			= 0x0B70;
const uint GL_DEPTH_WRITEMASK			= 0x0B72;
const uint GL_DEPTH_COMPONENT			= 0x1902;

// Lighting
const uint GL_LIGHTING			= 0x0B50;
const uint GL_LIGHT0				= 0x4000;
const uint GL_LIGHT1				= 0x4001;
const uint GL_LIGHT2				= 0x4002;
const uint GL_LIGHT3				= 0x4003;
const uint GL_LIGHT4				= 0x4004;
const uint GL_LIGHT5				= 0x4005;
const uint GL_LIGHT6				= 0x4006;
const uint GL_LIGHT7				= 0x4007;
const uint GL_SPOT_EXPONENT			= 0x1205;
const uint GL_SPOT_CUTOFF			= 0x1206;
const uint GL_CONSTANT_ATTENUATION		= 0x1207;
const uint GL_LINEAR_ATTENUATION		= 0x1208;
const uint GL_QUADRATIC_ATTENUATION		= 0x1209;
const uint GL_AMBIENT				= 0x1200;
const uint GL_DIFFUSE				= 0x1201;
const uint GL_SPECULAR			= 0x1202;
const uint GL_SHININESS			= 0x1601;
const uint GL_EMISSION			= 0x1600;
const uint GL_POSITION			= 0x1203;
const uint GL_SPOT_DIRECTION			= 0x1204;
const uint GL_AMBIENT_AND_DIFFUSE		= 0x1602;
const uint GL_COLOR_INDEXES			= 0x1603;
const uint GL_LIGHT_MODEL_TWO_SIDE		= 0x0B52;
const uint GL_LIGHT_MODEL_LOCAL_VIEWER	= 0x0B51;
const uint GL_LIGHT_MODEL_AMBIENT		= 0x0B53;
const uint GL_FRONT_AND_BACK			= 0x0408;
const uint GL_SHADE_MODEL			= 0x0B54;
const uint GL_FLAT				= 0x1D00;
const uint GL_SMOOTH				= 0x1D01;
const uint GL_COLOR_MATERIAL			= 0x0B57;
const uint GL_COLOR_MATERIAL_FACE		= 0x0B55;
const uint GL_COLOR_MATERIAL_PARAMETER	= 0x0B56;
const uint GL_NORMALIZE			= 0x0BA1;

// User clipping planes
const uint GL_CLIP_PLANE0			= 0x3000;
const uint GL_CLIP_PLANE1			= 0x3001;
const uint GL_CLIP_PLANE2			= 0x3002;
const uint GL_CLIP_PLANE3			= 0x3003;
const uint GL_CLIP_PLANE4			= 0x3004;
const uint GL_CLIP_PLANE5			= 0x3005;

// Accumulation buffer
const uint GL_ACCUM_RED_BITS			= 0x0D58;
const uint GL_ACCUM_GREEN_BITS		= 0x0D59;
const uint GL_ACCUM_BLUE_BITS			= 0x0D5A;
const uint GL_ACCUM_ALPHA_BITS		= 0x0D5B;
const uint GL_ACCUM_CLEAR_VALUE		= 0x0B80;
const uint GL_ACCUM				= 0x0100;
const uint GL_ADD				= 0x0104;
const uint GL_LOAD				= 0x0101;
const uint GL_MULT				= 0x0103;
const uint GL_RETURN				= 0x0102;

// Alpha testing
const uint GL_ALPHA_TEST			= 0x0BC0;
const uint GL_ALPHA_TEST_REF			= 0x0BC2;
const uint GL_ALPHA_TEST_FUNC			= 0x0BC1;

// Blending
const uint GL_BLEND				= 0x0BE2;
const uint GL_BLEND_SRC			= 0x0BE1;
const uint GL_BLEND_DST			= 0x0BE0;
const uint GL_ZERO				= 0x0;
const uint GL_ONE				= 0x1;
const uint GL_SRC_COLOR			= 0x0300;
const uint GL_ONE_MINUS_SRC_COLOR		= 0x0301;
const uint GL_SRC_ALPHA			= 0x0302;
const uint GL_ONE_MINUS_SRC_ALPHA		= 0x0303;
const uint GL_DST_ALPHA			= 0x0304;
const uint GL_ONE_MINUS_DST_ALPHA		= 0x0305;
const uint GL_DST_COLOR			= 0x0306;
const uint GL_ONE_MINUS_DST_COLOR		= 0x0307;
const uint GL_SRC_ALPHA_SATURATE		= 0x0308;

// Render Mode
const uint GL_FEEDBACK			= 0x1C01;
const uint GL_RENDER				= 0x1C00;
const uint GL_SELECT				= 0x1C02;

// Feedback
const uint GL_2D				= 0x0600;
const uint GL_3D				= 0x0601;
const uint GL_3D_COLOR			= 0x0602;
const uint GL_3D_COLOR_TEXTURE		= 0x0603;
const uint GL_4D_COLOR_TEXTURE		= 0x0604;
const uint GL_POINT_TOKEN			= 0x0701;
const uint GL_LINE_TOKEN			= 0x0702;
const uint GL_LINE_RESET_TOKEN		= 0x0707;
const uint GL_POLYGON_TOKEN			= 0x0703;
const uint GL_BITMAP_TOKEN			= 0x0704;
const uint GL_DRAW_PIXEL_TOKEN		= 0x0705;
const uint GL_COPY_PIXEL_TOKEN		= 0x0706;
const uint GL_PASS_THROUGH_TOKEN		= 0x0700;
const uint GL_FEEDBACK_BUFFER_POINTER		= 0x0DF0;
const uint GL_FEEDBACK_BUFFER_SIZE		= 0x0DF1;
const uint GL_FEEDBACK_BUFFER_TYPE		= 0x0DF2;

// Selection
const uint GL_SELECTION_BUFFER_POINTER	= 0x0DF3;
const uint GL_SELECTION_BUFFER_SIZE		= 0x0DF4;

// Fog
const uint GL_FOG				= 0x0B60;
const uint GL_FOG_MODE			= 0x0B65;
const uint GL_FOG_DENSITY			= 0x0B62;
const uint GL_FOG_COLOR			= 0x0B66;
const uint GL_FOG_INDEX			= 0x0B61;
const uint GL_FOG_START			= 0x0B63;
const uint GL_FOG_END				= 0x0B64;
const uint GL_LINEAR				= 0x2601;
const uint GL_EXP				= 0x0800;
const uint GL_EXP2				= 0x0801;

// Logic Ops
const uint GL_LOGIC_OP			= 0x0BF1;
const uint GL_INDEX_LOGIC_OP			= 0x0BF1;
const uint GL_COLOR_LOGIC_OP			= 0x0BF2;
const uint GL_LOGIC_OP_MODE			= 0x0BF0;
const uint GL_CLEAR				= 0x1500;
const uint GL_SET				= 0x150F;
const uint GL_COPY				= 0x1503;
const uint GL_COPY_INVERTED			= 0x150C;
const uint GL_NOOP				= 0x1505;
const uint GL_INVERT				= 0x150A;
const uint GL_AND				= 0x1501;
const uint GL_NAND				= 0x150E;
const uint GL_OR				= 0x1507;
const uint GL_NOR				= 0x1508;
const uint GL_XOR				= 0x1506;
const uint GL_EQUIV				= 0x1509;
const uint GL_AND_REVERSE			= 0x1502;
const uint GL_AND_INVERTED			= 0x1504;
const uint GL_OR_REVERSE			= 0x150B;
const uint GL_OR_INVERTED			= 0x150D;

// Stencil
const uint GL_STENCIL_TEST			= 0x0B90;
const uint GL_STENCIL_WRITEMASK		= 0x0B98;
const uint GL_STENCIL_BITS			= 0x0D57;
const uint GL_STENCIL_FUNC			= 0x0B92;
const uint GL_STENCIL_VALUE_MASK		= 0x0B93;
const uint GL_STENCIL_REF			= 0x0B97;
const uint GL_STENCIL_FAIL			= 0x0B94;
const uint GL_STENCIL_PASS_DEPTH_PASS		= 0x0B96;
const uint GL_STENCIL_PASS_DEPTH_FAIL		= 0x0B95;
const uint GL_STENCIL_CLEAR_VALUE		= 0x0B91;
const uint GL_STENCIL_INDEX			= 0x1901;
const uint GL_KEEP				= 0x1E00;
const uint GL_REPLACE				= 0x1E01;
const uint GL_INCR				= 0x1E02;
const uint GL_DECR				= 0x1E03;

// Buffers, Pixel Drawing/Reading
const uint GL_NONE				= 0x0;
const uint GL_LEFT				= 0x0406;
const uint GL_RIGHT				= 0x0407;
//const uint GL_FRONT				= 0x0404;
//const uint GL_BACK				= 0x0405;
//const uint GL_FRONT_AND_BACK		= 0x0408;
const uint GL_FRONT_LEFT			= 0x0400;
const uint GL_FRONT_RIGHT			= 0x0401;
const uint GL_BACK_LEFT			= 0x0402;
const uint GL_BACK_RIGHT			= 0x0403;
const uint GL_AUX0				= 0x0409;
const uint GL_AUX1				= 0x040A;
const uint GL_AUX2				= 0x040B;
const uint GL_AUX3				= 0x040C;
const uint GL_COLOR_INDEX			= 0x1900;
const uint GL_RED				= 0x1903;
const uint GL_GREEN				= 0x1904;
const uint GL_BLUE				= 0x1905;
const uint GL_ALPHA				= 0x1906;
const uint GL_LUMINANCE			= 0x1909;
const uint GL_LUMINANCE_ALPHA			= 0x190A;
const uint GL_ALPHA_BITS			= 0x0D55;
const uint GL_RED_BITS			= 0x0D52;
const uint GL_GREEN_BITS			= 0x0D53;
const uint GL_BLUE_BITS			= 0x0D54;
const uint GL_INDEX_BITS			= 0x0D51;
const uint GL_SUBPIXEL_BITS			= 0x0D50;
const uint GL_AUX_BUFFERS			= 0x0C00;
const uint GL_READ_BUFFER			= 0x0C02;
const uint GL_DRAW_BUFFER			= 0x0C01;
const uint GL_DOUBLEBUFFER			= 0x0C32;
const uint GL_STEREO				= 0x0C33;
const uint GL_BITMAP				= 0x1A00;
const uint GL_COLOR				= 0x1800;
const uint GL_DEPTH				= 0x1801;
const uint GL_STENCIL				= 0x1802;
const uint GL_DITHER				= 0x0BD0;
const uint GL_RGB				= 0x1907;
const uint GL_RGBA				= 0x1908;

// Implementation limits
const uint GL_MAX_LIST_NESTING		= 0x0B31;
const uint GL_MAX_ATTRIB_STACK_DEPTH		= 0x0D35;
const uint GL_MAX_MODELVIEW_STACK_DEPTH	= 0x0D36;
const uint GL_MAX_NAME_STACK_DEPTH		= 0x0D37;
const uint GL_MAX_PROJECTION_STACK_DEPTH	= 0x0D38;
const uint GL_MAX_TEXTURE_STACK_DEPTH		= 0x0D39;
const uint GL_MAX_EVAL_ORDER			= 0x0D30;
const uint GL_MAX_LIGHTS			= 0x0D31;
const uint GL_MAX_CLIP_PLANES			= 0x0D32;
const uint GL_MAX_TEXTURE_SIZE		= 0x0D33;
const uint GL_MAX_PIXEL_MAP_TABLE		= 0x0D34;
const uint GL_MAX_VIEWPORT_DIMS		= 0x0D3A;
const uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	= 0x0D3B;

// Gets
const uint GL_ATTRIB_STACK_DEPTH		= 0x0BB0;
const uint GL_CLIENT_ATTRIB_STACK_DEPTH	= 0x0BB1;
const uint GL_COLOR_CLEAR_VALUE		= 0x0C22;
const uint GL_COLOR_WRITEMASK			= 0x0C23;
const uint GL_CURRENT_INDEX			= 0x0B01;
const uint GL_CURRENT_COLOR			= 0x0B00;
const uint GL_CURRENT_NORMAL			= 0x0B02;
const uint GL_CURRENT_RASTER_COLOR		= 0x0B04;
const uint GL_CURRENT_RASTER_DISTANCE		= 0x0B09;
const uint GL_CURRENT_RASTER_INDEX		= 0x0B05;
const uint GL_CURRENT_RASTER_POSITION		= 0x0B07;
const uint GL_CURRENT_RASTER_TEXTURE_COORDS	= 0x0B06;
const uint GL_CURRENT_RASTER_POSITION_VALID	= 0x0B08;
const uint GL_CURRENT_TEXTURE_COORDS		= 0x0B03;
const uint GL_INDEX_CLEAR_VALUE		= 0x0C20;
const uint GL_INDEX_MODE			= 0x0C30;
const uint GL_INDEX_WRITEMASK			= 0x0C21;
const uint GL_MODELVIEW_MATRIX		= 0x0BA6;
const uint GL_MODELVIEW_STACK_DEPTH		= 0x0BA3;
const uint GL_NAME_STACK_DEPTH		= 0x0D70;
const uint GL_PROJECTION_MATRIX		= 0x0BA7;
const uint GL_PROJECTION_STACK_DEPTH		= 0x0BA4;
const uint GL_RENDER_MODE			= 0x0C40;
const uint GL_RGBA_MODE			= 0x0C31;
const uint GL_TEXTURE_MATRIX			= 0x0BA8;
const uint GL_TEXTURE_STACK_DEPTH		= 0x0BA5;
const uint GL_VIEWPORT			= 0x0BA2;

// Evaluators
const uint GL_AUTO_NORMAL			= 0x0D80;
const uint GL_MAP1_COLOR_4			= 0x0D90;
const uint GL_MAP1_GRID_DOMAIN		= 0x0DD0;
const uint GL_MAP1_GRID_SEGMENTS		= 0x0DD1;
const uint GL_MAP1_INDEX			= 0x0D91;
const uint GL_MAP1_NORMAL			= 0x0D92;
const uint GL_MAP1_TEXTURE_COORD_1		= 0x0D93;
const uint GL_MAP1_TEXTURE_COORD_2		= 0x0D94;
const uint GL_MAP1_TEXTURE_COORD_3		= 0x0D95;
const uint GL_MAP1_TEXTURE_COORD_4		= 0x0D96;
const uint GL_MAP1_VERTEX_3			= 0x0D97;
const uint GL_MAP1_VERTEX_4			= 0x0D98;
const uint GL_MAP2_COLOR_4			= 0x0DB0;
const uint GL_MAP2_GRID_DOMAIN		= 0x0DD2;
const uint GL_MAP2_GRID_SEGMENTS		= 0x0DD3;
const uint GL_MAP2_INDEX			= 0x0DB1;
const uint GL_MAP2_NORMAL			= 0x0DB2;
const uint GL_MAP2_TEXTURE_COORD_1		= 0x0DB3;
const uint GL_MAP2_TEXTURE_COORD_2		= 0x0DB4;
const uint GL_MAP2_TEXTURE_COORD_3		= 0x0DB5;
const uint GL_MAP2_TEXTURE_COORD_4		= 0x0DB6;
const uint GL_MAP2_VERTEX_3			= 0x0DB7;
const uint GL_MAP2_VERTEX_4			= 0x0DB8;
const uint GL_COEFF				= 0x0A00;
const uint GL_DOMAIN				= 0x0A02;
const uint GL_ORDER				= 0x0A01;

// Hints
const uint GL_FOG_HINT			= 0x0C54;
const uint GL_LINE_SMOOTH_HINT		= 0x0C52;
const uint GL_PERSPECTIVE_CORRECTION_HINT	= 0x0C50;
const uint GL_POINT_SMOOTH_HINT		= 0x0C51;
const uint GL_POLYGON_SMOOTH_HINT		= 0x0C53;
const uint GL_DONT_CARE			= 0x1100;
const uint GL_FASTEST				= 0x1101;
const uint GL_NICEST				= 0x1102;

// Scissor box
const uint GL_SCISSOR_TEST			= 0x0C11;
const uint GL_SCISSOR_BOX			= 0x0C10;

// Pixel Mode / Transfer
const uint GL_MAP_COLOR			= 0x0D10;
const uint GL_MAP_STENCIL			= 0x0D11;
const uint GL_INDEX_SHIFT			= 0x0D12;
const uint GL_INDEX_OFFSET			= 0x0D13;
const uint GL_RED_SCALE			= 0x0D14;
const uint GL_RED_BIAS			= 0x0D15;
const uint GL_GREEN_SCALE			= 0x0D18;
const uint GL_GREEN_BIAS			= 0x0D19;
const uint GL_BLUE_SCALE			= 0x0D1A;
const uint GL_BLUE_BIAS			= 0x0D1B;
const uint GL_ALPHA_SCALE			= 0x0D1C;
const uint GL_ALPHA_BIAS			= 0x0D1D;
const uint GL_DEPTH_SCALE			= 0x0D1E;
const uint GL_DEPTH_BIAS			= 0x0D1F;
const uint GL_PIXEL_MAP_S_TO_S_SIZE		= 0x0CB1;
const uint GL_PIXEL_MAP_I_TO_I_SIZE		= 0x0CB0;
const uint GL_PIXEL_MAP_I_TO_R_SIZE		= 0x0CB2;
const uint GL_PIXEL_MAP_I_TO_G_SIZE		= 0x0CB3;
const uint GL_PIXEL_MAP_I_TO_B_SIZE		= 0x0CB4;
const uint GL_PIXEL_MAP_I_TO_A_SIZE		= 0x0CB5;
const uint GL_PIXEL_MAP_R_TO_R_SIZE		= 0x0CB6;
const uint GL_PIXEL_MAP_G_TO_G_SIZE		= 0x0CB7;
const uint GL_PIXEL_MAP_B_TO_B_SIZE		= 0x0CB8;
const uint GL_PIXEL_MAP_A_TO_A_SIZE		= 0x0CB9;
const uint GL_PIXEL_MAP_S_TO_S		= 0x0C71;
const uint GL_PIXEL_MAP_I_TO_I		= 0x0C70;
const uint GL_PIXEL_MAP_I_TO_R		= 0x0C72;
const uint GL_PIXEL_MAP_I_TO_G		= 0x0C73;
const uint GL_PIXEL_MAP_I_TO_B		= 0x0C74;
const uint GL_PIXEL_MAP_I_TO_A		= 0x0C75;
const uint GL_PIXEL_MAP_R_TO_R		= 0x0C76;
const uint GL_PIXEL_MAP_G_TO_G		= 0x0C77;
const uint GL_PIXEL_MAP_B_TO_B		= 0x0C78;
const uint GL_PIXEL_MAP_A_TO_A		= 0x0C79;
const uint GL_PACK_ALIGNMENT			= 0x0D05;
const uint GL_PACK_LSB_FIRST			= 0x0D01;
const uint GL_PACK_ROW_LENGTH			= 0x0D02;
const uint GL_PACK_SKIP_PIXELS		= 0x0D04;
const uint GL_PACK_SKIP_ROWS			= 0x0D03;
const uint GL_PACK_SWAP_BYTES			= 0x0D00;
const uint GL_UNPACK_ALIGNMENT		= 0x0CF5;
const uint GL_UNPACK_LSB_FIRST		= 0x0CF1;
const uint GL_UNPACK_ROW_LENGTH		= 0x0CF2;
const uint GL_UNPACK_SKIP_PIXELS		= 0x0CF4;
const uint GL_UNPACK_SKIP_ROWS		= 0x0CF3;
const uint GL_UNPACK_SWAP_BYTES		= 0x0CF0;
const uint GL_ZOOM_X				= 0x0D16;
const uint GL_ZOOM_Y				= 0x0D17;

// Texture mapping
const uint GL_TEXTURE_ENV			= 0x2300;
const uint GL_TEXTURE_ENV_MODE		= 0x2200;
const uint GL_TEXTURE_1D			= 0x0DE0;
const uint GL_TEXTURE_2D			= 0x0DE1;
const uint GL_TEXTURE_WRAP_S			= 0x2802;
const uint GL_TEXTURE_WRAP_T			= 0x2803;
const uint GL_TEXTURE_MAG_FILTER		= 0x2800;
const uint GL_TEXTURE_MIN_FILTER		= 0x2801;
const uint GL_TEXTURE_ENV_COLOR		= 0x2201;
const uint GL_TEXTURE_GEN_S			= 0x0C60;
const uint GL_TEXTURE_GEN_T			= 0x0C61;
const uint GL_TEXTURE_GEN_MODE		= 0x2500;
const uint GL_TEXTURE_BORDER_COLOR		= 0x1004;
const uint GL_TEXTURE_WIDTH			= 0x1000;
const uint GL_TEXTURE_HEIGHT			= 0x1001;
const uint GL_TEXTURE_BORDER			= 0x1005;
const uint GL_TEXTURE_COMPONENTS		= 0x1003;
const uint GL_TEXTURE_RED_SIZE		= 0x805C;
const uint GL_TEXTURE_GREEN_SIZE		= 0x805D;
const uint GL_TEXTURE_BLUE_SIZE		= 0x805E;
const uint GL_TEXTURE_ALPHA_SIZE		= 0x805F;
const uint GL_TEXTURE_LUMINANCE_SIZE		= 0x8060;
const uint GL_TEXTURE_INTENSITY_SIZE		= 0x8061;
const uint GL_NEAREST_MIPMAP_NEAREST		= 0x2700;
const uint GL_NEAREST_MIPMAP_LINEAR		= 0x2702;
const uint GL_LINEAR_MIPMAP_NEAREST		= 0x2701;
const uint GL_LINEAR_MIPMAP_LINEAR		= 0x2703;
const uint GL_OBJECT_LINEAR			= 0x2401;
const uint GL_OBJECT_PLANE			= 0x2501;
const uint GL_EYE_LINEAR			= 0x2400;
const uint GL_EYE_PLANE			= 0x2502;
const uint GL_SPHERE_MAP			= 0x2402;
const uint GL_DECAL				= 0x2101;
const uint GL_MODULATE			= 0x2100;
const uint GL_NEAREST				= 0x2600;
const uint GL_REPEAT				= 0x2901;
const uint GL_CLAMP				= 0x2900;
const uint GL_S				= 0x2000;
const uint GL_T				= 0x2001;
const uint GL_R				= 0x2002;
const uint GL_Q				= 0x2003;
const uint GL_TEXTURE_GEN_R			= 0x0C62;
const uint GL_TEXTURE_GEN_Q			= 0x0C63;

// Utility
const uint GL_VENDOR				= 0x1F00;
const uint GL_RENDERER			= 0x1F01;
const uint GL_VERSION				= 0x1F02;
const uint GL_EXTENSIONS			= 0x1F03;

// Errors
const uint GL_NO_ERROR			= 0x0;
const uint GL_INVALID_VALUE			= 0x0501;
const uint GL_INVALID_ENUM			= 0x0500;
const uint GL_INVALID_OPERATION		= 0x0502;
const uint GL_STACK_OVERFLOW			= 0x0503;
const uint GL_STACK_UNDERFLOW			= 0x0504;
const uint GL_OUT_OF_MEMORY			= 0x0505;

// glPush/PopAttrib bits
const uint GL_CURRENT_BIT			= 0x00000001;
const uint GL_POINT_BIT			= 0x00000002;
const uint GL_LINE_BIT			= 0x00000004;
const uint GL_POLYGON_BIT			= 0x00000008;
const uint GL_POLYGON_STIPPLE_BIT		= 0x00000010;
const uint GL_PIXEL_MODE_BIT			= 0x00000020;
const uint GL_LIGHTING_BIT			= 0x00000040;
const uint GL_FOG_BIT				= 0x00000080;
const uint GL_DEPTH_BUFFER_BIT		= 0x00000100;
const uint GL_ACCUM_BUFFER_BIT		= 0x00000200;
const uint GL_STENCIL_BUFFER_BIT		= 0x00000400;
const uint GL_VIEWPORT_BIT			= 0x00000800;
const uint GL_TRANSFORM_BIT			= 0x00001000;
const uint GL_ENABLE_BIT			= 0x00002000;
const uint GL_COLOR_BUFFER_BIT		= 0x00004000;
const uint GL_HINT_BIT			= 0x00008000;
const uint GL_EVAL_BIT			= 0x00010000;
const uint GL_LIST_BIT			= 0x00020000;
const uint GL_TEXTURE_BIT			= 0x00040000;
const uint GL_SCISSOR_BIT			= 0x00080000;
const uint GL_ALL_ATTRIB_BITS			= 0x000FFFFF;

// OpenGL 1.1
const uint GL_PROXY_TEXTURE_1D		= 0x8063;
const uint GL_PROXY_TEXTURE_2D		= 0x8064;
const uint GL_TEXTURE_PRIORITY		= 0x8066;
const uint GL_TEXTURE_RESIDENT		= 0x8067;
const uint GL_TEXTURE_BINDING_1D		= 0x8068;
const uint GL_TEXTURE_BINDING_2D		= 0x8069;
const uint GL_TEXTURE_INTERNAL_FORMAT		= 0x1003;
const uint GL_ALPHA4				= 0x803B;
const uint GL_ALPHA8				= 0x803C;
const uint GL_ALPHA12				= 0x803D;
const uint GL_ALPHA16				= 0x803E;
const uint GL_LUMINANCE4			= 0x803F;
const uint GL_LUMINANCE8			= 0x8040;
const uint GL_LUMINANCE12			= 0x8041;
const uint GL_LUMINANCE16			= 0x8042;
const uint GL_LUMINANCE4_ALPHA4		= 0x8043;
const uint GL_LUMINANCE6_ALPHA2		= 0x8044;
const uint GL_LUMINANCE8_ALPHA8		= 0x8045;
const uint GL_LUMINANCE12_ALPHA4		= 0x8046;
const uint GL_LUMINANCE12_ALPHA12		= 0x8047;
const uint GL_LUMINANCE16_ALPHA16		= 0x8048;
const uint GL_INTENSITY			= 0x8049;
const uint GL_INTENSITY4			= 0x804A;
const uint GL_INTENSITY8			= 0x804B;
const uint GL_INTENSITY12			= 0x804C;
const uint GL_INTENSITY16			= 0x804D;
const uint GL_R3_G3_B2			= 0x2A10;
const uint GL_RGB4				= 0x804F;
const uint GL_RGB5				= 0x8050;
const uint GL_RGB8				= 0x8051;
const uint GL_RGB10				= 0x8052;
const uint GL_RGB12				= 0x8053;
const uint GL_RGB16				= 0x8054;
const uint GL_RGBA2				= 0x8055;
const uint GL_RGBA4				= 0x8056;
const uint GL_RGB5_A1				= 0x8057;
const uint GL_RGBA8				= 0x8058;
const uint GL_RGB10_A2			= 0x8059;
const uint GL_RGBA12				= 0x805A;
const uint GL_RGBA16				= 0x805B;
const uint GL_CLIENT_PIXEL_STORE_BIT		= 0x00000001;
const uint GL_CLIENT_VERTEX_ARRAY_BIT		= 0x00000002;
const uint GL_ALL_CLIENT_ATTRIB_BITS		= 0xFFFFFFFF;
const uint GL_CLIENT_ALL_ATTRIB_BITS		= 0xFFFFFFFF;

// OpenGL 1.2
const uint GL_RESCALE_NORMAL			= 0x803A;
const uint GL_CLAMP_TO_EDGE			= 0x812F;
const uint GL_MAX_ELEMENTS_VERTICES		= 0x80E8;
const uint GL_MAX_ELEMENTS_INDICES		= 0x80E9;
const uint GL_BGR				= 0x80E0;
const uint GL_BGRA				= 0x80E1;
const uint GL_UNSIGNED_BYTE_3_3_2		= 0x8032;
const uint GL_UNSIGNED_BYTE_2_3_3_REV		= 0x8362;
const uint GL_UNSIGNED_SHORT_5_6_5		= 0x8363;
const uint GL_UNSIGNED_SHORT_5_6_5_REV	= 0x8364;
const uint GL_UNSIGNED_SHORT_4_4_4_4		= 0x8033;
const uint GL_UNSIGNED_SHORT_4_4_4_4_REV	= 0x8365;
const uint GL_UNSIGNED_SHORT_5_5_5_1		= 0x8034;
const uint GL_UNSIGNED_SHORT_1_5_5_5_REV	= 0x8366;
const uint GL_UNSIGNED_INT_8_8_8_8		= 0x8035;
const uint GL_UNSIGNED_INT_8_8_8_8_REV	= 0x8367;
const uint GL_UNSIGNED_INT_10_10_10_2		= 0x8036;
const uint GL_UNSIGNED_INT_2_10_10_10_REV	= 0x8368;
const uint GL_LIGHT_MODEL_COLOR_CONTROL	= 0x81F8;
const uint GL_SINGLE_COLOR			= 0x81F9;
const uint GL_SEPARATE_SPECULAR_COLOR		= 0x81FA;
const uint GL_TEXTURE_MIN_LOD			= 0x813A;
const uint GL_TEXTURE_MAX_LOD			= 0x813B;
const uint GL_TEXTURE_BASE_LEVEL		= 0x813C;
const uint GL_TEXTURE_MAX_LEVEL		= 0x813D;
const uint GL_SMOOTH_POINT_SIZE_RANGE		= 0x0B12;
const uint GL_SMOOTH_POINT_SIZE_GRANULARITY	= 0x0B13;
const uint GL_SMOOTH_LINE_WIDTH_RANGE		= 0x0B22;
const uint GL_SMOOTH_LINE_WIDTH_GRANULARITY	= 0x0B23;
const uint GL_ALIASED_POINT_SIZE_RANGE	= 0x846D;
const uint GL_ALIASED_LINE_WIDTH_RANGE	= 0x846E;
const uint GL_PACK_SKIP_IMAGES		= 0x806B;
const uint GL_PACK_IMAGE_HEIGHT		= 0x806C;
const uint GL_UNPACK_SKIP_IMAGES		= 0x806D;
const uint GL_UNPACK_IMAGE_HEIGHT		= 0x806E;
const uint GL_TEXTURE_3D			= 0x806F;
const uint GL_PROXY_TEXTURE_3D		= 0x8070;
const uint GL_TEXTURE_DEPTH			= 0x8071;
const uint GL_TEXTURE_WRAP_R			= 0x8072;
const uint GL_MAX_3D_TEXTURE_SIZE		= 0x8073;
const uint GL_TEXTURE_BINDING_3D		= 0x806A;

// OpenGL 1.3
const uint GL_TEXTURE0			= 0x84C0;
const uint GL_TEXTURE1			= 0x84C1;
const uint GL_TEXTURE2			= 0x84C2;
const uint GL_TEXTURE3			= 0x84C3;
const uint GL_TEXTURE4			= 0x84C4;
const uint GL_TEXTURE5			= 0x84C5;
const uint GL_TEXTURE6			= 0x84C6;
const uint GL_TEXTURE7			= 0x84C7;
const uint GL_TEXTURE8			= 0x84C8;
const uint GL_TEXTURE9			= 0x84C9;
const uint GL_TEXTURE10			= 0x84CA;
const uint GL_TEXTURE11			= 0x84CB;
const uint GL_TEXTURE12			= 0x84CC;
const uint GL_TEXTURE13			= 0x84CD;
const uint GL_TEXTURE14			= 0x84CE;
const uint GL_TEXTURE15			= 0x84CF;
const uint GL_TEXTURE16			= 0x84D0;
const uint GL_TEXTURE17			= 0x84D1;
const uint GL_TEXTURE18			= 0x84D2;
const uint GL_TEXTURE19			= 0x84D3;
const uint GL_TEXTURE20			= 0x84D4;
const uint GL_TEXTURE21			= 0x84D5;
const uint GL_TEXTURE22			= 0x84D6;
const uint GL_TEXTURE23			= 0x84D7;
const uint GL_TEXTURE24			= 0x84D8;
const uint GL_TEXTURE25			= 0x84D9;
const uint GL_TEXTURE26			= 0x84DA;
const uint GL_TEXTURE27			= 0x84DB;
const uint GL_TEXTURE28			= 0x84DC;
const uint GL_TEXTURE29			= 0x84DD;
const uint GL_TEXTURE30			= 0x84DE;
const uint GL_TEXTURE31			= 0x84DF;
const uint GL_ACTIVE_TEXTURE			= 0x84E0;
const uint GL_CLIENT_ACTIVE_TEXTURE		= 0x84E1;
const uint GL_MAX_TEXTURE_UNITS		= 0x84E2;
const uint GL_NORMAL_MAP			= 0x8511;
const uint GL_REFLECTION_MAP			= 0x8512;
const uint GL_TEXTURE_CUBE_MAP		= 0x8513;
const uint GL_TEXTURE_BINDING_CUBE_MAP	= 0x8514;
const uint GL_TEXTURE_CUBE_MAP_POSITIVE_X	= 0x8515;
const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X	= 0x8516;
const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y	= 0x8517;
const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	= 0x8518;
const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z	= 0x8519;
const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	= 0x851A;
const uint GL_PROXY_TEXTURE_CUBE_MAP		= 0x851B;
const uint GL_MAX_CUBE_MAP_TEXTURE_SIZE	= 0x851C;
const uint GL_COMPRESSED_ALPHA		= 0x84E9;
const uint GL_COMPRESSED_LUMINANCE		= 0x84EA;
const uint GL_COMPRESSED_LUMINANCE_ALPHA	= 0x84EB;
const uint GL_COMPRESSED_INTENSITY		= 0x84EC;
const uint GL_COMPRESSED_RGB			= 0x84ED;
const uint GL_COMPRESSED_RGBA			= 0x84EE;
const uint GL_TEXTURE_COMPRESSION_HINT	= 0x84EF;
const uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE	= 0x86A0;
const uint GL_TEXTURE_COMPRESSED		= 0x86A1;
const uint GL_NUM_COMPRESSED_TEXTURE_FORMATS	= 0x86A2;
const uint GL_COMPRESSED_TEXTURE_FORMATS	= 0x86A3;
const uint GL_MULTISAMPLE			= 0x809D;
const uint GL_SAMPLE_ALPHA_TO_COVERAGE	= 0x809E;
const uint GL_SAMPLE_ALPHA_TO_ONE		= 0x809F;
const uint GL_SAMPLE_COVERAGE			= 0x80A0;
const uint GL_SAMPLE_BUFFERS			= 0x80A8;
const uint GL_SAMPLES				= 0x80A9;
const uint GL_SAMPLE_COVERAGE_VALUE		= 0x80AA;
const uint GL_SAMPLE_COVERAGE_INVERT		= 0x80AB;
const uint GL_MULTISAMPLE_BIT			= 0x20000000;
const uint GL_TRANSPOSE_MODELVIEW_MATRIX	= 0x84E3;
const uint GL_TRANSPOSE_PROJECTION_MATRIX	= 0x84E4;
const uint GL_TRANSPOSE_TEXTURE_MATRIX	= 0x84E5;
const uint GL_TRANSPOSE_COLOR_MATRIX		= 0x84E6;
const uint GL_COMBINE				= 0x8570;
const uint GL_COMBINE_RGB			= 0x8571;
const uint GL_COMBINE_ALPHA			= 0x8572;
const uint GL_SOURCE0_RGB			= 0x8580;
const uint GL_SOURCE1_RGB			= 0x8581;
const uint GL_SOURCE2_RGB			= 0x8582;
const uint GL_SOURCE0_ALPHA			= 0x8588;
const uint GL_SOURCE1_ALPHA			= 0x8589;
const uint GL_SOURCE2_ALPHA			= 0x858A;
const uint GL_OPERAND0_RGB			= 0x8590;
const uint GL_OPERAND1_RGB			= 0x8591;
const uint GL_OPERAND2_RGB			= 0x8592;
const uint GL_OPERAND0_ALPHA			= 0x8598;
const uint GL_OPERAND1_ALPHA			= 0x8599;
const uint GL_OPERAND2_ALPHA			= 0x859A;
const uint GL_RGB_SCALE			= 0x8573;
const uint GL_ADD_SIGNED			= 0x8574;
const uint GL_INTERPOLATE			= 0x8575;
const uint GL_SUBTRACT			= 0x84E7;
const uint GL_CONSTANT			= 0x8576;
const uint GL_PRIMARY_COLOR			= 0x8577;
const uint GL_PREVIOUS			= 0x8578;
const uint GL_DOT3_RGB			= 0x86AE;
const uint GL_DOT3_RGBA			= 0x86AF;
const uint GL_CLAMP_TO_BORDER			= 0x812D;

// OpenGL 1.4
const uint GL_BLEND_DST_RGB			= 0x80C8;
const uint GL_BLEND_SRC_RGB			= 0x80C9;
const uint GL_BLEND_DST_ALPHA			= 0x80CA;
const uint GL_BLEND_SRC_ALPHA			= 0x80CB;
const uint GL_POINT_SIZE_MIN			= 0x8126;
const uint GL_POINT_SIZE_MAX			= 0x8127;
const uint GL_POINT_FADE_THRESHOLD_SIZE	= 0x8128;
const uint GL_POINT_DISTANCE_ATTENUATION	= 0x8129;
const uint GL_GENERATE_MIPMAP			= 0x8191;
const uint GL_GENERATE_MIPMAP_HINT		= 0x8192;
const uint GL_DEPTH_COMPONENT16		= 0x81A5;
const uint GL_DEPTH_COMPONENT24		= 0x81A6;
const uint GL_DEPTH_COMPONENT32		= 0x81A7;
const uint GL_MIRRORED_REPEAT			= 0x8370;
const uint GL_FOG_COORDINATE_SOURCE		= 0x8450;
const uint GL_FOG_COORDINATE			= 0x8451;
const uint GL_FRAGMENT_DEPTH			= 0x8452;
const uint GL_CURRENT_FOG_COORDINATE		= 0x8453;
const uint GL_FOG_COORDINATE_ARRAY_TYPE	= 0x8454;
const uint GL_FOG_COORDINATE_ARRAY_STRIDE	= 0x8455;
const uint GL_FOG_COORDINATE_ARRAY_POINTER	= 0x8456;
const uint GL_FOG_COORDINATE_ARRAY		= 0x8457;
const uint GL_COLOR_SUM			= 0x8458;
const uint GL_CURRENT_SECONDARY_COLOR		= 0x8459;
const uint GL_SECONDARY_COLOR_ARRAY_SIZE	= 0x845A;
const uint GL_SECONDARY_COLOR_ARRAY_TYPE	= 0x845B;
const uint GL_SECONDARY_COLOR_ARRAY_STRIDE	= 0x845C;
const uint GL_SECONDARY_COLOR_ARRAY_POINTER	= 0x845D;
const uint GL_SECONDARY_COLOR_ARRAY		= 0x845E;
const uint GL_MAX_TEXTURE_LOD_BIAS		= 0x84FD;
const uint GL_TEXTURE_FILTER_CONTROL		= 0x8500;
const uint GL_TEXTURE_LOD_BIAS		= 0x8501;
const uint GL_INCR_WRAP			= 0x8507;
const uint GL_DECR_WRAP			= 0x8508;
const uint GL_TEXTURE_DEPTH_SIZE		= 0x884A;
const uint GL_DEPTH_TEXTURE_MODE		= 0x884B;
const uint GL_TEXTURE_COMPARE_MODE		= 0x884C;
const uint GL_TEXTURE_COMPARE_FUNC		= 0x884D;
const uint GL_COMPARE_R_TO_TEXTURE		= 0x884E;

// OpenGL 1.5
const uint GL_BUFFER_SIZE			= 0x8764;
const uint GL_BUFFER_USAGE			= 0x8765;
const uint GL_QUERY_COUNTER_BITS		= 0x8864;
const uint GL_CURRENT_QUERY			= 0x8865;
const uint GL_QUERY_RESULT			= 0x8866;
const uint GL_QUERY_RESULT_AVAILABLE		= 0x8867;
const uint GL_ARRAY_BUFFER			= 0x8892;
const uint GL_ELEMENT_ARRAY_BUFFER		= 0x8893;
const uint GL_ARRAY_BUFFER_BINDING		= 0x8894;
const uint GL_ELEMENT_ARRAY_BUFFER_BINDING	= 0x8895;
const uint GL_VERTEX_ARRAY_BUFFER_BINDING	= 0x8896;
const uint GL_NORMAL_ARRAY_BUFFER_BINDING	= 0x8897;
const uint GL_COLOR_ARRAY_BUFFER_BINDING	= 0x8898;
const uint GL_INDEX_ARRAY_BUFFER_BINDING	= 0x8899;
const uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING= 0x889A;
const uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING	= 0x889B;
const uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING= 0x889C;
const uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING= 0x889D;
const uint GL_WEIGHT_ARRAY_BUFFER_BINDING	= 0x889E;
const uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING= 0x889F;
const uint GL_READ_ONLY			= 0x88B8;
const uint GL_WRITE_ONLY			= 0x88B9;
const uint GL_READ_WRITE			= 0x88BA;
const uint GL_BUFFER_ACCESS			= 0x88BB;
const uint GL_BUFFER_MAPPED			= 0x88BC;
const uint GL_BUFFER_MAP_POINTER		= 0x88BD;
const uint GL_STREAM_DRAW			= 0x88E0;
const uint GL_STREAM_READ			= 0x88E1;
const uint GL_STREAM_COPY			= 0x88E2;
const uint GL_STATIC_DRAW			= 0x88E4;
const uint GL_STATIC_READ			= 0x88E5;
const uint GL_STATIC_COPY			= 0x88E6;
const uint GL_DYNAMIC_DRAW			= 0x88E8;
const uint GL_DYNAMIC_READ			= 0x88E9;
const uint GL_DYNAMIC_COPY			= 0x88EA;
const uint GL_SAMPLES_PASSED			= 0x8914;
const uint GL_FOG_COORD_SRC			= GL_FOG_COORDINATE_SOURCE;
const uint GL_FOG_COORD			= GL_FOG_COORDINATE;
const uint GL_CURRENT_FOG_COORD		= GL_CURRENT_FOG_COORDINATE;
const uint GL_FOG_COORD_ARRAY_TYPE		= GL_FOG_COORDINATE_ARRAY_TYPE;
const uint GL_FOG_COORD_ARRAY_STRIDE		= GL_FOG_COORDINATE_ARRAY_STRIDE;
const uint GL_FOG_COORD_ARRAY_POINTER		= GL_FOG_COORDINATE_ARRAY_POINTER;
const uint GL_FOG_COORD_ARRAY			= GL_FOG_COORDINATE_ARRAY;
const uint GL_FOG_COORD_ARRAY_BUFFER_BINDING	= GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
const uint GL_SRC0_RGB			= GL_SOURCE0_RGB;
const uint GL_SRC1_RGB			= GL_SOURCE1_RGB;
const uint GL_SRC2_RGB			= GL_SOURCE2_RGB;
const uint GL_SRC0_ALPHA			= GL_SOURCE0_ALPHA;
const uint GL_SRC1_ALPHA			= GL_SOURCE1_ALPHA;
const uint GL_SRC2_ALPHA			= GL_SOURCE2_ALPHA;

// OpenGL 2.0
const uint GL_BLEND_EQUATION_RGB		= 0x8009;
const uint GL_VERTEX_ATTRIB_ARRAY_ENABLED	= 0x8622;
const uint GL_VERTEX_ATTRIB_ARRAY_SIZE	= 0x8623;
const uint GL_VERTEX_ATTRIB_ARRAY_STRIDE	= 0x8624;
const uint GL_VERTEX_ATTRIB_ARRAY_TYPE	= 0x8625;
const uint GL_CURRENT_VERTEX_ATTRIB		= 0x8626;
const uint GL_VERTEX_PROGRAM_POINT_SIZE	= 0x8642;
const uint GL_VERTEX_PROGRAM_TWO_SIDE		= 0x8643;
const uint GL_VERTEX_ATTRIB_ARRAY_POINTER	= 0x8645;
const uint GL_STENCIL_BACK_FUNC		= 0x8800;
const uint GL_STENCIL_BACK_FAIL		= 0x8801;
const uint GL_STENCIL_BACK_PASS_DEPTH_FAIL	= 0x8802;
const uint GL_STENCIL_BACK_PASS_DEPTH_PASS	= 0x8803;
const uint GL_MAX_DRAW_BUFFERS		= 0x8824;
const uint GL_DRAW_BUFFER0			= 0x8825;
const uint GL_DRAW_BUFFER1			= 0x8826;
const uint GL_DRAW_BUFFER2			= 0x8827;
const uint GL_DRAW_BUFFER3			= 0x8828;
const uint GL_DRAW_BUFFER4			= 0x8829;
const uint GL_DRAW_BUFFER5			= 0x882A;
const uint GL_DRAW_BUFFER6			= 0x882B;
const uint GL_DRAW_BUFFER7			= 0x882C;
const uint GL_DRAW_BUFFER8			= 0x882D;
const uint GL_DRAW_BUFFER9			= 0x882E;
const uint GL_DRAW_BUFFER10			= 0x882F;
const uint GL_DRAW_BUFFER11			= 0x8830;
const uint GL_DRAW_BUFFER12			= 0x8831;
const uint GL_DRAW_BUFFER13			= 0x8832;
const uint GL_DRAW_BUFFER14			= 0x8833;
const uint GL_DRAW_BUFFER15			= 0x8834;
const uint GL_BLEND_EQUATION_ALPHA		= 0x883D;
const uint GL_POINT_SPRITE			= 0x8861;
const uint GL_COORD_REPLACE			= 0x8862;
const uint GL_MAX_VERTEX_ATTRIBS		= 0x8869;
const uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	= 0x886A;
const uint GL_MAX_TEXTURE_COORDS		= 0x8871;
const uint GL_MAX_TEXTURE_IMAGE_UNITS		= 0x8872;
const uint GL_FRAGMENT_SHADER			= 0x8B30;
const uint GL_VERTEX_SHADER			= 0x8B31;
const uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	= 0x8B49;
const uint GL_MAX_VERTEX_UNIFORM_COMPONENTS	= 0x8B4A;
const uint GL_MAX_VARYING_FLOATS		= 0x8B4B;
const uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	= 0x8B4C;
const uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS= 0x8B4D;
const uint GL_SHADER_TYPE			= 0x8B4F;
const uint GL_FLOAT_VEC2			= 0x8B50;
const uint GL_FLOAT_VEC3			= 0x8B51;
const uint GL_FLOAT_VEC4			= 0x8B52;
const uint GL_INT_VEC2			= 0x8B53;
const uint GL_INT_VEC3			= 0x8B54;
const uint GL_INT_VEC4			= 0x8B55;
const uint GL_BOOL				= 0x8B56;
const uint GL_BOOL_VEC2			= 0x8B57;
const uint GL_BOOL_VEC3			= 0x8B58;
const uint GL_BOOL_VEC4			= 0x8B59;
const uint GL_FLOAT_MAT2			= 0x8B5A;
const uint GL_FLOAT_MAT3			= 0x8B5B;
const uint GL_FLOAT_MAT4			= 0x8B5C;
const uint GL_SAMPLER_1D			= 0x8B5D;
const uint GL_SAMPLER_2D			= 0x8B5E;
const uint GL_SAMPLER_3D			= 0x8B5F;
const uint GL_SAMPLER_CUBE			= 0x8B60;
const uint GL_SAMPLER_1D_SHADOW		= 0x8B61;
const uint GL_SAMPLER_2D_SHADOW		= 0x8B62;
const uint GL_DELETE_STATUS			= 0x8B80;
const uint GL_COMPILE_STATUS			= 0x8B81;
const uint GL_LINK_STATUS			= 0x8B82;
const uint GL_VALIDATE_STATUS			= 0x8B83;
const uint GL_INFO_LOG_LENGTH			= 0x8B84;
const uint GL_ATTACHED_SHADERS		= 0x8B85;
const uint GL_ACTIVE_UNIFORMS			= 0x8B86;
const uint GL_ACTIVE_UNIFORM_MAX_LENGTH	= 0x8B87;
const uint GL_SHADER_SOURCE_LENGTH		= 0x8B88;
const uint GL_ACTIVE_ATTRIBUTES		= 0x8B89;
const uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	= 0x8B8A;
const uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT	= 0x8B8B;
const uint GL_SHADING_LANGUAGE_VERSION	= 0x8B8C;
const uint GL_CURRENT_PROGRAM			= 0x8B8D;
const uint GL_POINT_SPRITE_COORD_ORIGIN	= 0x8CA0;
const uint GL_LOWER_LEFT			= 0x8CA1;
const uint GL_UPPER_LEFT			= 0x8CA2;
const uint GL_STENCIL_BACK_REF		= 0x8CA3;
const uint GL_STENCIL_BACK_VALUE_MASK		= 0x8CA4;
const uint GL_STENCIL_BACK_WRITEMASK		= 0x8CA5;

// ARB_Imaging
const uint GL_CONSTANT_COLOR			= 0x8001;
const uint GL_ONE_MINUS_CONSTANT_COLOR	= 0x8002;
const uint GL_CONSTANT_ALPHA			= 0x8003;
const uint GL_ONE_MINUS_CONSTANT_ALPHA	= 0x8004;
const uint GL_BLEND_COLOR			= 0x8005;
const uint GL_FUNC_ADD			= 0x8006;
const uint GL_MIN				= 0x8007;
const uint GL_MAX				= 0x8008;
const uint GL_BLEND_EQUATION			= 0x8009;
const uint GL_FUNC_SUBTRACT			= 0x800A;
const uint GL_FUNC_REVERSE_SUBTRACT		= 0x800B;
const uint GL_CONVOLUTION_1D			= 0x8010;
const uint GL_CONVOLUTION_2D			= 0x8011;
const uint GL_SEPARABLE_2D			= 0x8012;
const uint GL_CONVOLUTION_BORDER_MODE		= 0x8013;
const uint GL_CONVOLUTION_FILTER_SCALE	= 0x8014;
const uint GL_CONVOLUTION_FILTER_BIAS		= 0x8015;
const uint GL_REDUCE				= 0x8016;
const uint GL_CONVOLUTION_FORMAT		= 0x8017;
const uint GL_CONVOLUTION_WIDTH		= 0x8018;
const uint GL_CONVOLUTION_HEIGHT		= 0x8019;
const uint GL_MAX_CONVOLUTION_WIDTH		= 0x801A;
const uint GL_MAX_CONVOLUTION_HEIGHT		= 0x801B;
const uint GL_POST_CONVOLUTION_RED_SCALE	= 0x801C;
const uint GL_POST_CONVOLUTION_GREEN_SCALE	= 0x801D;
const uint GL_POST_CONVOLUTION_BLUE_SCALE	= 0x801E;
const uint GL_POST_CONVOLUTION_ALPHA_SCALE	= 0x801F;
const uint GL_POST_CONVOLUTION_RED_BIAS	= 0x8020;
const uint GL_POST_CONVOLUTION_GREEN_BIAS	= 0x8021;
const uint GL_POST_CONVOLUTION_BLUE_BIAS	= 0x8022;
const uint GL_POST_CONVOLUTION_ALPHA_BIAS	= 0x8023;
const uint GL_HISTOGRAM			= 0x8024;
const uint GL_PROXY_HISTOGRAM			= 0x8025;
const uint GL_HISTOGRAM_WIDTH			= 0x8026;
const uint GL_HISTOGRAM_FORMAT		= 0x8027;
const uint GL_HISTOGRAM_RED_SIZE		= 0x8028;
const uint GL_HISTOGRAM_GREEN_SIZE		= 0x8029;
const uint GL_HISTOGRAM_BLUE_SIZE		= 0x802A;
const uint GL_HISTOGRAM_ALPHA_SIZE		= 0x802B;
const uint GL_HISTOGRAM_LUMINANCE_SIZE	= 0x802C;
const uint GL_HISTOGRAM_SINK			= 0x802D;
const uint GL_MINMAX				= 0x802E;
const uint GL_MINMAX_FORMAT			= 0x802F;
const uint GL_MINMAX_SINK			= 0x8030;
const uint GL_TABLE_TOO_LARGE			= 0x8031;
const uint GL_COLOR_MATRIX			= 0x80B1;
const uint GL_COLOR_MATRIX_STACK_DEPTH	= 0x80B2;
const uint GL_MAX_COLOR_MATRIX_STACK_DEPTH	= 0x80B3;
const uint GL_POST_COLOR_MATRIX_RED_SCALE	= 0x80B4;
const uint GL_POST_COLOR_MATRIX_GREEN_SCALE	= 0x80B5;
const uint GL_POST_COLOR_MATRIX_BLUE_SCALE	= 0x80B6;
const uint GL_POST_COLOR_MATRIX_ALPHA_SCALE	= 0x80B7;
const uint GL_POST_COLOR_MATRIX_RED_BIAS	= 0x80B8;
const uint GL_POST_COLOR_MATRIX_GREEN_BIAS	= 0x80B9;
const uint GL_POST_COLOR_MATRIX_BLUE_BIAS	= 0x80BA;
const uint GL_POST_COLOR_MATRIX_ALPHA_BIAS	= 0x80BB;
const uint GL_COLOR_TABLE			= 0x80D0;
const uint GL_POST_CONVOLUTION_COLOR_TABLE	= 0x80D1;
const uint GL_POST_COLOR_MATRIX_COLOR_TABLE	= 0x80D2;
const uint GL_PROXY_COLOR_TABLE		= 0x80D3;
const uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE= 0x80D4;
const uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE= 0x80D5;
const uint GL_COLOR_TABLE_SCALE		= 0x80D6;
const uint GL_COLOR_TABLE_BIAS		= 0x80D7;
const uint GL_COLOR_TABLE_FORMAT		= 0x80D8;
const uint GL_COLOR_TABLE_WIDTH		= 0x80D9;
const uint GL_COLOR_TABLE_RED_SIZE		= 0x80DA;
const uint GL_COLOR_TABLE_GREEN_SIZE		= 0x80DB;
const uint GL_COLOR_TABLE_BLUE_SIZE		= 0x80DC;
const uint GL_COLOR_TABLE_ALPHA_SIZE		= 0x80DD;
const uint GL_COLOR_TABLE_LUMINANCE_SIZE	= 0x80DE;
const uint GL_COLOR_TABLE_INTENSITY_SIZE	= 0x80DF;
const uint GL_CONSTANT_BORDER			= 0x8151;
const uint GL_REPLICATE_BORDER		= 0x8153;
const uint GL_CONVOLUTION_BORDER_COLOR	= 0x8154;

/*
 * Types
 */
alias uint	GLenum;
alias ubyte	GLboolean;
alias uint	GLbitfield;
alias void	GLvoid;
alias byte	GLbyte;
alias short	GLshort;
alias int	GLsize;
alias ubyte	GLubyte;
alias ushort	GLushort;
alias uint	GLuint;
alias int	GLsizei;
alias float	GLfloat;
alias float	GLclampf;
alias double	GLdouble;
alias double	GLclampd;
alias char	GLchar;
alias ptrdiff_t	intptr;
alias ptrdiff_t	GLsizeiptr;

/*
 * Functions
 */
 string failed;
private HXModule gldrv;
import std.stdio;
private void* getProc(string procname) {
	void* symbol = ExeModule_GetSymbol(gldrv, procname);
	if (symbol is null) {
		failed~=procname~"\r\n";
		//writeln("Failed to load GL proc address " ~ procname );
	}
	return (symbol);
}

static this () {
	failed="Failed to load following GL functions:\r\n";
	version (Windows) {
		gldrv = ExeModule_Load("opengl32.dll");
	} else version (linux) {
		gldrv = ExeModule_Load("libGL.so");
	} else version (darwin) {
		gldrv = ExeModule_Load("/System/Library/Frameworks/OpenGL.framework");
	}
	glClearIndex = cast(pfglClearIndex)getProc("glClearIndex");
	glClearColor = cast(pfglClearColor)getProc("glClearColor");
	glClear = cast(pfglClear)getProc("glClear");
	glIndexMask = cast(pfglIndexMask)getProc("glIndexMask");
	glColorMask = cast(pfglColorMask)getProc("glColorMask");
	glAlphaFunc = cast(pfglAlphaFunc)getProc("glAlphaFunc");
	glBlendFunc = cast(pfglBlendFunc)getProc("glBlendFunc");
	glLogicOp = cast(pfglLogicOp)getProc("glLogicOp");
	glCullFace = cast(pfglCullFace)getProc("glCullFace");
	glFrontFace = cast(pfglFrontFace)getProc("glFrontFace");
	glPointSize = cast(pfglPointSize)getProc("glPointSize");
	glLineWidth = cast(pfglLineWidth)getProc("glLineWidth");
	glLineStipple = cast(pfglLineStipple)getProc("glLineStipple");
	glPolygonMode = cast(pfglPolygonMode)getProc("glPolygonMode");
	glPolygonOffset = cast(pfglPolygonOffset)getProc("glPolygonOffset");
	glPolygonStipple = cast(pfglPolygonStipple)getProc("glPolygonStipple");
	glGetPolygonStipple = cast(pfglGetPolygonStipple)getProc("glGetPolygonStipple");
	glEdgeFlag = cast(pfglEdgeFlag)getProc("glEdgeFlag");
	glEdgeFlagv = cast(pfglEdgeFlagv)getProc("glEdgeFlagv");
	glScissor = cast(pfglScissor)getProc("glScissor");
	glClipPlane = cast(pfglClipPlane)getProc("glClipPlane");
	glGetClipPlane = cast(pfglGetClipPlane)getProc("glGetClipPlane");
	glDrawBuffer = cast(pfglDrawBuffer)getProc("glDrawBuffer");
	glReadBuffer = cast(pfglReadBuffer)getProc("glReadBuffer");
	glEnable = cast(pfglEnable)getProc("glEnable");
	glDisable = cast(pfglDisable)getProc("glDisable");
	glIsEnabled = cast(pfglIsEnabled)getProc("glIsEnabled");
	glEnableClientState = cast(pfglEnableClientState)getProc("glEnableClientState");
	glDisableClientState = cast(pfglDisableClientState)getProc("glDisableClientState");
	glGetBooleanv = cast(pfglGetBooleanv)getProc("glGetBooleanv");
	glGetDoublev = cast(pfglGetDoublev)getProc("glGetDoublev");
	glGetFloatv = cast(pfglGetFloatv)getProc("glGetFloatv");
	glGetIntegerv = cast(pfglGetIntegerv)getProc("glGetIntegerv");
	glPushAttrib = cast(pfglPushAttrib)getProc("glPushAttrib");
	glPopAttrib = cast(pfglPopAttrib)getProc("glPopAttrib");
	glPushClientAttrib = cast(pfglPushClientAttrib)getProc("glPushClientAttrib");
	glPopClientAttrib = cast(pfglPopClientAttrib)getProc("glPopClientAttrib");
	glRenderMode = cast(pfglRenderMode)getProc("glRenderMode");
	glGetError = cast(pfglGetError)getProc("glGetError");
	glGetString = cast(pfglGetString)getProc("glGetString");
	glFinish = cast(pfglFinish)getProc("glFinish");
	glFlush = cast(pfglFlush)getProc("glFlush");
	glHint = cast(pfglHint)getProc("glHint");

	glClearDepth = cast(pfglClearDepth)getProc("glClearDepth");
	glDepthFunc = cast(pfglDepthFunc)getProc("glDepthFunc");
	glDepthMask = cast(pfglDepthMask)getProc("glDepthMask");
	glDepthRange = cast(pfglDepthRange)getProc("glDepthRange");

	glClearAccum = cast(pfglClearAccum)getProc("glClearAccum");
	glAccum = cast(pfglAccum)getProc("glAccum");

	glMatrixMode = cast(pfglMatrixMode)getProc("glMatrixMode");
	glOrtho = cast(pfglOrtho)getProc("glOrtho");
	glFrustum = cast(pfglFrustum)getProc("glFrustum");
	glViewport = cast(pfglViewport)getProc("glViewport");
	glPushMatrix = cast(pfglPushMatrix)getProc("glPushMatrix");
	glPopMatrix = cast(pfglPopMatrix)getProc("glPopMatrix");
	glLoadIdentity = cast(pfglLoadIdentity)getProc("glLoadIdentity");
	glLoadMatrixd = cast(pfglLoadMatrixd)getProc("glLoadMatrixd");
	glLoadMatrixf = cast(pfglLoadMatrixf)getProc("glLoadMatrixf");
	glMultMatrixd = cast(pfglMultMatrixd)getProc("glMultMatrixd");
	glMultMatrixf = cast(pfglMultMatrixf)getProc("glMultMatrixf");
	glRotated = cast(pfglRotated)getProc("glRotated");
	glRotatef = cast(pfglRotatef)getProc("glRotatef");
	glScaled = cast(pfglScaled)getProc("glScaled");
	glScalef = cast(pfglScalef)getProc("glScalef");
	glTranslated = cast(pfglTranslated)getProc("glTranslated");
	glTranslatef = cast(pfglTranslatef)getProc("glTranslatef");

	glIsList = cast(pfglIsList)getProc("glIsList");
	glDeleteLists = cast(pfglDeleteLists)getProc("glDeleteLists");
	glGenLists = cast(pfglGenLists)getProc("glGenLists");
	glNewList = cast(pfglNewList)getProc("glNewList");
	glEndList = cast(pfglEndList)getProc("glEndList");
	glCallList = cast(pfglCallList)getProc("glCallList");
	glCallLists = cast(pfglCallLists)getProc("glCallLists");
	glListBase = cast(pfglListBase)getProc("glListBase");

	glBegin = cast(pfglBegin)getProc("glBegin");
	glEnd = cast(pfglEnd)getProc("glEnd");
	glVertex2d = cast(pfglVertex2d)getProc("glVertex2d");
	glVertex2f = cast(pfglVertex2f)getProc("glVertex2f");
	glVertex2i = cast(pfglVertex2i)getProc("glVertex2i");
	glVertex2s = cast(pfglVertex2s)getProc("glVertex2s");
	glVertex3d = cast(pfglVertex3d)getProc("glVertex3d");
	glVertex3f = cast(pfglVertex3f)getProc("glVertex3f");
	glVertex3i = cast(pfglVertex3i)getProc("glVertex3i");
	glVertex3s = cast(pfglVertex3s)getProc("glVertex3s");
	glVertex4d = cast(pfglVertex4d)getProc("glVertex4d");
	glVertex4f = cast(pfglVertex4f)getProc("glVertex4f");
	glVertex4i = cast(pfglVertex4i)getProc("glVertex4i");
	glVertex4s = cast(pfglVertex4s)getProc("glVertex4s");
	glVertex2dv = cast(pfglVertex2dv)getProc("glVertex2dv");
	glVertex2fv = cast(pfglVertex2fv)getProc("glVertex2fv");
	glVertex2iv = cast(pfglVertex2iv)getProc("glVertex2iv");
	glVertex2sv = cast(pfglVertex2sv)getProc("glVertex2sv");
	glVertex3dv = cast(pfglVertex3dv)getProc("glVertex3dv");
	glVertex3fv = cast(pfglVertex3fv)getProc("glVertex3fv");
	glVertex3iv = cast(pfglVertex3iv)getProc("glVertex3iv");
	glVertex3sv = cast(pfglVertex3sv)getProc("glVertex3sv");
	glVertex4dv = cast(pfglVertex4dv)getProc("glVertex4dv");
	glVertex4fv = cast(pfglVertex4fv)getProc("glVertex4fv");
	glVertex4iv = cast(pfglVertex4iv)getProc("glVertex4iv");
	glVertex4sv = cast(pfglVertex4sv)getProc("glVertex4sv");
	glNormal3b = cast(pfglNormal3b)getProc("glNormal3b");
	glNormal3d = cast(pfglNormal3d)getProc("glNormal3d");
	glNormal3f = cast(pfglNormal3f)getProc("glNormal3f");
	glNormal3i = cast(pfglNormal3i)getProc("glNormal3i");
	glNormal3s = cast(pfglNormal3s)getProc("glNormal3s");
	glNormal3bv = cast(pfglNormal3bv)getProc("glNormal3bv");
	glNormal3dv = cast(pfglNormal3dv)getProc("glNormal3dv");
	glNormal3fv = cast(pfglNormal3fv)getProc("glNormal3fv");
	glNormal3iv = cast(pfglNormal3iv)getProc("glNormal3iv");
	glNormal3sv = cast(pfglNormal3sv)getProc("glNormal3sv");
	glIndexd = cast(pfglIndexd)getProc("glIndexd");
	glIndexf = cast(pfglIndexf)getProc("glIndexf");
	glIndexi = cast(pfglIndexi)getProc("glIndexi");
	glIndexs = cast(pfglIndexs)getProc("glIndexs");
	glIndexub = cast(pfglIndexub)getProc("glIndexub");
	glIndexdv = cast(pfglIndexdv)getProc("glIndexdv");
	glIndexfv = cast(pfglIndexfv)getProc("glIndexfv");
	glIndexiv = cast(pfglIndexiv)getProc("glIndexiv");
	glIndexsv = cast(pfglIndexsv)getProc("glIndexsv");
	glIndexubv = cast(pfglIndexubv)getProc("glIndexubv");
	glColor3b = cast(pfglColor3b)getProc("glColor3b");
	glColor3d = cast(pfglColor3d)getProc("glColor3d");
	glColor3f = cast(pfglColor3f)getProc("glColor3f");
	glColor3i = cast(pfglColor3i)getProc("glColor3i");
	glColor3s = cast(pfglColor3s)getProc("glColor3s");
	glColor3ub = cast(pfglColor3ub)getProc("glColor3ub");
	glColor3ui = cast(pfglColor3ui)getProc("glColor3ui");
	glColor3us = cast(pfglColor3us)getProc("glColor3us");
	glColor4b = cast(pfglColor4b)getProc("glColor4b");
	glColor4d = cast(pfglColor4d)getProc("glColor4d");
	glColor4f = cast(pfglColor4f)getProc("glColor4f");
	glColor4i = cast(pfglColor4i)getProc("glColor4i");
	glColor4s = cast(pfglColor4s)getProc("glColor4s");
	glColor4ub = cast(pfglColor4ub)getProc("glColor4ub");
	glColor4ui = cast(pfglColor4ui)getProc("glColor4ui");
	glColor4us = cast(pfglColor4us)getProc("glColor4us");
	glColor3bv = cast(pfglColor3bv)getProc("glColor3bv");
	glColor3dv = cast(pfglColor3dv)getProc("glColor3dv");
	glColor3fv = cast(pfglColor3fv)getProc("glColor3fv");
	glColor3iv = cast(pfglColor3iv)getProc("glColor3iv");
	glColor3sv = cast(pfglColor3sv)getProc("glColor3sv");
	glColor3ubv = cast(pfglColor3ubv)getProc("glColor3ubv");
	glColor3uiv = cast(pfglColor3uiv)getProc("glColor3uiv");
	glColor3usv = cast(pfglColor3usv)getProc("glColor3usv");
	glColor4bv = cast(pfglColor4bv)getProc("glColor4bv");
	glColor4dv = cast(pfglColor4dv)getProc("glColor4dv");
	glColor4fv = cast(pfglColor4fv)getProc("glColor4fv");
	glColor4iv = cast(pfglColor4iv)getProc("glColor4iv");
	glColor4sv = cast(pfglColor4sv)getProc("glColor4sv");
	glColor4ubv = cast(pfglColor4ubv)getProc("glColor4ubv");
	glColor4uiv = cast(pfglColor4uiv)getProc("glColor4uiv");
	glColor4usv = cast(pfglColor4usv)getProc("glColor4usv");
	glTexCoord1d = cast(pfglTexCoord1d)getProc("glTexCoord1d");
	glTexCoord1f = cast(pfglTexCoord1f)getProc("glTexCoord1f");
	glTexCoord1i = cast(pfglTexCoord1i)getProc("glTexCoord1i");
	glTexCoord1s = cast(pfglTexCoord1s)getProc("glTexCoord1s");
	glTexCoord2d = cast(pfglTexCoord2d)getProc("glTexCoord2d");
	glTexCoord2f = cast(pfglTexCoord2f)getProc("glTexCoord2f");
	glTexCoord2i = cast(pfglTexCoord2i)getProc("glTexCoord2i");
	glTexCoord2s = cast(pfglTexCoord2s)getProc("glTexCoord2s");
	glTexCoord3d = cast(pfglTexCoord3d)getProc("glTexCoord3d");
	glTexCoord3f = cast(pfglTexCoord3f)getProc("glTexCoord3f");
	glTexCoord3i = cast(pfglTexCoord3i)getProc("glTexCoord3i");
	glTexCoord3s = cast(pfglTexCoord3s)getProc("glTexCoord3s");
	glTexCoord4d = cast(pfglTexCoord4d)getProc("glTexCoord4d");
	glTexCoord4f = cast(pfglTexCoord4f)getProc("glTexCoord4f");
	glTexCoord4i = cast(pfglTexCoord4i)getProc("glTexCoord4i");
	glTexCoord4s = cast(pfglTexCoord4s)getProc("glTexCoord4s");
	glTexCoord1dv = cast(pfglTexCoord1dv)getProc("glTexCoord1dv");
	glTexCoord1fv = cast(pfglTexCoord1fv)getProc("glTexCoord1fv");
	glTexCoord1iv = cast(pfglTexCoord1iv)getProc("glTexCoord1iv");
	glTexCoord1sv = cast(pfglTexCoord1sv)getProc("glTexCoord1sv");
	glTexCoord2dv = cast(pfglTexCoord2dv)getProc("glTexCoord2dv");
	glTexCoord2fv = cast(pfglTexCoord2fv)getProc("glTexCoord2fv");
	glTexCoord2iv = cast(pfglTexCoord2iv)getProc("glTexCoord2iv");
	glTexCoord2sv = cast(pfglTexCoord2sv)getProc("glTexCoord2sv");
	glTexCoord3dv = cast(pfglTexCoord3dv)getProc("glTexCoord3dv");
	glTexCoord3fv = cast(pfglTexCoord3fv)getProc("glTexCoord3fv");
	glTexCoord3iv = cast(pfglTexCoord3iv)getProc("glTexCoord3iv");
	glTexCoord3sv = cast(pfglTexCoord3sv)getProc("glTexCoord3sv");
	glTexCoord4dv = cast(pfglTexCoord4dv)getProc("glTexCoord4dv");
	glTexCoord4fv = cast(pfglTexCoord4fv)getProc("glTexCoord4fv");
	glTexCoord4iv = cast(pfglTexCoord4iv)getProc("glTexCoord4iv");
	glTexCoord4sv = cast(pfglTexCoord4sv)getProc("glTexCoord4sv");
	glRasterPos2d = cast(pfglRasterPos2d)getProc("glRasterPos2d");
	glRasterPos2f = cast(pfglRasterPos2f)getProc("glRasterPos2f");
	glRasterPos2i = cast(pfglRasterPos2i)getProc("glRasterPos2i");
	glRasterPos2s = cast(pfglRasterPos2s)getProc("glRasterPos2s");
	glRasterPos3d = cast(pfglRasterPos3d)getProc("glRasterPos3d");
	glRasterPos3f = cast(pfglRasterPos3f)getProc("glRasterPos3f");
	glRasterPos3i = cast(pfglRasterPos3i)getProc("glRasterPos3i");
	glRasterPos3s = cast(pfglRasterPos3s)getProc("glRasterPos3s");
	glRasterPos4d = cast(pfglRasterPos4d)getProc("glRasterPos4d");
	glRasterPos4f = cast(pfglRasterPos4f)getProc("glRasterPos4f");
	glRasterPos4i = cast(pfglRasterPos4i)getProc("glRasterPos4i");
	glRasterPos4s = cast(pfglRasterPos4s)getProc("glRasterPos4s");
	glRasterPos2dv = cast(pfglRasterPos2dv)getProc("glRasterPos2dv");
	glRasterPos2fv = cast(pfglRasterPos2fv)getProc("glRasterPos2fv");
	glRasterPos2iv = cast(pfglRasterPos2iv)getProc("glRasterPos2iv");
	glRasterPos2sv = cast(pfglRasterPos2sv)getProc("glRasterPos2sv");
	glRasterPos3dv = cast(pfglRasterPos3dv)getProc("glRasterPos3dv");
	glRasterPos3fv = cast(pfglRasterPos3fv)getProc("glRasterPos3fv");
	glRasterPos3iv = cast(pfglRasterPos3iv)getProc("glRasterPos3iv");
	glRasterPos3sv = cast(pfglRasterPos3sv)getProc("glRasterPos3sv");
	glRasterPos4dv = cast(pfglRasterPos4dv)getProc("glRasterPos4dv");
	glRasterPos4fv = cast(pfglRasterPos4fv)getProc("glRasterPos4fv");
	glRasterPos4iv = cast(pfglRasterPos4iv)getProc("glRasterPos4iv");
	glRasterPos4sv = cast(pfglRasterPos4sv)getProc("glRasterPos4sv");
	glRectd = cast(pfglRectd)getProc("glRectd");
	glRectf = cast(pfglRectf)getProc("glRectf");
	glRecti = cast(pfglRecti)getProc("glRecti");
	glRects = cast(pfglRects)getProc("glRects");
	glRectdv = cast(pfglRectdv)getProc("glRectdv");
	glRectfv = cast(pfglRectfv)getProc("glRectfv");
	glRectiv = cast(pfglRectiv)getProc("glRectiv");
	glRectsv = cast(pfglRectsv)getProc("glRectsv");

	glVertexPointer = cast(pfglVertexPointer)getProc("glVertexPointer");
	glNormalPointer = cast(pfglNormalPointer)getProc("glNormalPointer");
	glColorPointer = cast(pfglColorPointer)getProc("glColorPointer");
	glIndexPointer = cast(pfglIndexPointer)getProc("glIndexPointer");
	glTexCoordPointer = cast(pfglTexCoordPointer)getProc("glTexCoordPointer");
	glEdgeFlagPointer = cast(pfglEdgeFlagPointer)getProc("glEdgeFlagPointer");
	glGetPointerv = cast(pfglGetPointerv)getProc("glGetPointerv");
	glArrayElement = cast(pfglArrayElement)getProc("glArrayElement");
	glDrawArrays = cast(pfglDrawArrays)getProc("glDrawArrays");
	glDrawElements = cast(pfglDrawElements)getProc("glDrawElements");
	interleavedArrays = cast(pfinterleavedArrays)getProc("interleavedArrays");

	glShadeModel = cast(pfglShadeModel)getProc("glShadeModel");
	glLightf = cast(pfglLightf)getProc("glLightf");
	glLighti = cast(pfglLighti)getProc("glLighti");
	glLightfv = cast(pfglLightfv)getProc("glLightfv");
	glLightiv = cast(pfglLightiv)getProc("glLightiv");
	glGetLightfv = cast(pfglGetLightfv)getProc("glGetLightfv");
	glGetLightiv = cast(pfglGetLightiv)getProc("glGetLightiv");
	glLightModelf = cast(pfglLightModelf)getProc("glLightModelf");
	glLightModeli = cast(pfglLightModeli)getProc("glLightModeli");
	glLightModelfv = cast(pfglLightModelfv)getProc("glLightModelfv");
	glLightModeliv = cast(pfglLightModeliv)getProc("glLightModeliv");
	glMaterialf = cast(pfglMaterialf)getProc("glMaterialf");
	glMateriali = cast(pfglMateriali)getProc("glMateriali");
	glMaterialfv = cast(pfglMaterialfv)getProc("glMaterialfv");
	glMaterialiv = cast(pfglMaterialiv)getProc("glMaterialiv");
	glGetMaterialfv = cast(pfglGetMaterialfv)getProc("glGetMaterialfv");
	glGetMaterialiv = cast(pfglGetMaterialiv)getProc("glGetMaterialiv");
	glColorMaterial = cast(pfglColorMaterial)getProc("glColorMaterial");

	glPixelZoom = cast(pfglPixelZoom)getProc("glPixelZoom");
	glPixelStoref = cast(pfglPixelStoref)getProc("glPixelStoref");
	glPixelStorei = cast(pfglPixelStorei)getProc("glPixelStorei");
	glPixelTransferf = cast(pfglPixelTransferf)getProc("glPixelTransferf");
	glPixelTransferi = cast(pfglPixelTransferi)getProc("glPixelTransferi");
	glPixelMapfv = cast(pfglPixelMapfv)getProc("glPixelMapfv");
	glPixelMapuiv = cast(pfglPixelMapuiv)getProc("glPixelMapuiv");
	glPixelMapusv = cast(pfglPixelMapusv)getProc("glPixelMapusv");
	glGetPixelMapfv = cast(pfglGetPixelMapfv)getProc("glGetPixelMapfv");
	glGetPixelMapuiv = cast(pfglGetPixelMapuiv)getProc("glGetPixelMapuiv");
	glGetPixelMapusv = cast(pfglGetPixelMapusv)getProc("glGetPixelMapusv");
	glBitmap = cast(pfglBitmap)getProc("glBitmap");
	glReadPixels = cast(pfglReadPixels)getProc("glReadPixels");
	glDrawPixels = cast(pfglDrawPixels)getProc("glDrawPixels");
	glCopyPixels = cast(pfglCopyPixels)getProc("glCopyPixels");

	glStencilFunc = cast(pfglStencilFunc)getProc("glStencilFunc");
	glStencilMask = cast(pfglStencilMask)getProc("glStencilMask");
	glStencilOp = cast(pfglStencilOp)getProc("glStencilOp");
	glClearStencil = cast(pfglClearStencil)getProc("glClearStencil");

	glTexGend = cast(pfglTexGend)getProc("glTexGend");
	glTexGenf = cast(pfglTexGenf)getProc("glTexGenf");
	glTexGeni = cast(pfglTexGeni)getProc("glTexGeni");
	glTexGendv = cast(pfglTexGendv)getProc("glTexGendv");
	glTexGenfv = cast(pfglTexGenfv)getProc("glTexGenfv");
	glTexGeniv = cast(pfglTexGeniv)getProc("glTexGeniv");
	glGetTexGendv = cast(pfglGetTexGendv)getProc("glGetTexGendv");
	glGetTexGenfv = cast(pfglGetTexGenfv)getProc("glGetTexGenfv");
	glGetTexGeniv = cast(pfglGetTexGeniv)getProc("glGetTexGeniv");
	glTexEnvf = cast(pfglTexEnvf)getProc("glTexEnvf");
	glTexEnvi = cast(pfglTexEnvi)getProc("glTexEnvi");
	glTexEnvfv = cast(pfglTexEnvfv)getProc("glTexEnvfv");
	glTexEnviv = cast(pfglTexEnviv)getProc("glTexEnviv");
	glGetTexEnvfv = cast(pfglGetTexEnvfv)getProc("glGetTexEnvfv");
	glGetTexEnviv = cast(pfglGetTexEnviv)getProc("glGetTexEnviv");
	glTexParameterf = cast(pfglTexParameterf)getProc("glTexParameterf");
	glTexParameteri = cast(pfglTexParameteri)getProc("glTexParameteri");
	glTexParameterfv = cast(pfglTexParameterfv)getProc("glTexParameterfv");
	glTexParameteriv = cast(pfglTexParameteriv)getProc("glTexParameteriv");
	glGetTexParameterfv = cast(pfglGetTexParameterfv)getProc("glGetTexParameterfv");
	glGetTexParameteriv = cast(pfglGetTexParameteriv)getProc("glGetTexParameteriv");
	glGetTexLevelParameterfv = cast(pfglGetTexLevelParameterfv)getProc("glGetTexLevelParameterfv");
	glGetTexLevelParameteriv = cast(pfglGetTexLevelParameteriv)getProc("glGetTexLevelParameteriv");
	glTexImage1D = cast(pfglTexImage1D)getProc("glTexImage1D");
	glTexImage2D = cast(pfglTexImage2D)getProc("glTexImage2D");
	glGetTexImage = cast(pfglGetTexImage)getProc("glGetTexImage");

	glMap1d = cast(pfglMap1d)getProc("glMap1d");
	glMap1f = cast(pfglMap1f)getProc("glMap1f");
	glMap2d = cast(pfglMap2d)getProc("glMap2d");
	glMap2f = cast(pfglMap2f)getProc("glMap2f");
	glGetMapdv = cast(pfglGetMapdv)getProc("glGetMapdv");
	glGetMapfv = cast(pfglGetMapfv)getProc("glGetMapfv");
	glGetMapiv = cast(pfglGetMapiv)getProc("glGetMapiv");
	glEvalCoord1d = cast(pfglEvalCoord1d)getProc("glEvalCoord1d");
	glEvalCoord1f = cast(pfglEvalCoord1f)getProc("glEvalCoord1f");
	glEvalCoord1dv = cast(pfglEvalCoord1dv)getProc("glEvalCoord1dv");
	glEvalCoord1fv = cast(pfglEvalCoord1fv)getProc("glEvalCoord1fv");
	glEvalCoord2d = cast(pfglEvalCoord2d)getProc("glEvalCoord2d");
	glEvalCoord2f = cast(pfglEvalCoord2f)getProc("glEvalCoord2f");
	glEvalCoord2dv = cast(pfglEvalCoord2dv)getProc("glEvalCoord2dv");
	glEvalCoord2fv = cast(pfglEvalCoord2fv)getProc("glEvalCoord2fv");
	glMapGrid1d = cast(pfglMapGrid1d)getProc("glMapGrid1d");
	glMapGrid1f = cast(pfglMapGrid1f)getProc("glMapGrid1f");
	glMapGrid2d = cast(pfglMapGrid2d)getProc("glMapGrid2d");
	glMapGrid2f = cast(pfglMapGrid2f)getProc("glMapGrid2f");
	glEvalPoint1 = cast(pfglEvalPoint1)getProc("glEvalPoint1");
	glEvalPoint2 = cast(pfglEvalPoint2)getProc("glEvalPoint2");
	glEvalMesh1 = cast(pfglEvalMesh1)getProc("glEvalMesh1");
	glEvalMesh2 = cast(pfglEvalMesh2)getProc("glEvalMesh2");

	glFogf = cast(pfglFogf)getProc("glFogf");
	glFogi = cast(pfglFogi)getProc("glFogi");
	glFogfv = cast(pfglFogfv)getProc("glFogfv");
	glFogiv = cast(pfglFogiv)getProc("glFogiv");

	glFeedbackBuffer = cast(pfglFeedbackBuffer)getProc("glFeedbackBuffer");
	glPassThrough = cast(pfglPassThrough)getProc("glPassThrough");
	glSelectBuffer = cast(pfglSelectBuffer)getProc("glSelectBuffer");
	glInitNames = cast(pfglInitNames)getProc("glInitNames");
	glLoadName = cast(pfglLoadName)getProc("glLoadName");
	glPushName = cast(pfglPushName)getProc("glPushName");
	glPopName = cast(pfglPopName)getProc("glPopName");

	glGenTextures = cast(pfglGenTextures)getProc("glGenTextures");
	glDeleteTextures = cast(pfglDeleteTextures)getProc("glDeleteTextures");
	glBindTexture = cast(pfglBindTexture)getProc("glBindTexture");
	glPrioritizeTextures = cast(pfglPrioritizeTextures)getProc("glPrioritizeTextures");
	glAreTexturesResident = cast(pfglAreTexturesResident)getProc("glAreTexturesResident");
	glIsTexture = cast(pfglIsTexture)getProc("glIsTexture");
	glTexSubImage1D = cast(pfglTexSubImage1D)getProc("glTexSubImage1D");
	glTexSubImage2D = cast(pfglTexSubImage2D)getProc("glTexSubImage2D");
	glCopyTexImage1D = cast(pfglCopyTexImage1D)getProc("glCopyTexImage1D");
	glCopyTexImage2D = cast(pfglCopyTexImage2D)getProc("glCopyTexImage2D");
	glCopyTexSubImage1D = cast(pfglCopyTexSubImage1D)getProc("glCopyTexSubImage1D");
	glCopyTexSubImage2D = cast(pfglCopyTexSubImage2D)getProc("glCopyTexSubImage2D");

	glDrawRangeElements = cast(pfglDrawRangeElements)getProc("glDrawRangeElements");
	glTexImage3D = cast(pfglTexImage3D)getProc("glTexImage3D");
	glTexSubImage3D = cast(pfglTexSubImage3D)getProc("glTexSubImage3D");
	glCopyTexSubImage3D = cast(pfglCopyTexSubImage3D)getProc("glCopyTexSubImage3D");

	glActiveTexture = cast(pfglActiveTexture)getProc("glActiveTexture");
	glClientActiveTexture = cast(pfglClientActiveTexture)getProc("glClientActiveTexture");
	glMultiTexCoord1d = cast(pfglMultiTexCoord1d)getProc("glMultiTexCoord1d");
	glMultiTexCoord1dv = cast(pfglMultiTexCoord1dv)getProc("glMultiTexCoord1dv");
	glMultiTexCoord1f = cast(pfglMultiTexCoord1f)getProc("glMultiTexCoord1f");
	glMultiTexCoord1fv = cast(pfglMultiTexCoord1fv)getProc("glMultiTexCoord1fv");
	glMultiTexCoord1i = cast(pfglMultiTexCoord1i)getProc("glMultiTexCoord1i");
	glMultiTexCoord1iv = cast(pfglMultiTexCoord1iv)getProc("glMultiTexCoord1iv");
	glMultiTexCoord1s = cast(pfglMultiTexCoord1s)getProc("glMultiTexCoord1s");
	glMultiTexCoord1sv = cast(pfglMultiTexCoord1sv)getProc("glMultiTexCoord1sv");
	glMultiTexCoord2d = cast(pfglMultiTexCoord2d)getProc("glMultiTexCoord2d");
	glMultiTexCoord2dv = cast(pfglMultiTexCoord2dv)getProc("glMultiTexCoord2dv");
	glMultiTexCoord2f = cast(pfglMultiTexCoord2f)getProc("glMultiTexCoord2f");
	glMultiTexCoord2fv = cast(pfglMultiTexCoord2fv)getProc("glMultiTexCoord2fv");
	glMultiTexCoord2i = cast(pfglMultiTexCoord2i)getProc("glMultiTexCoord2i");
	glMultiTexCoord2iv = cast(pfglMultiTexCoord2iv)getProc("glMultiTexCoord2iv");
	glMultiTexCoord2s = cast(pfglMultiTexCoord2s)getProc("glMultiTexCoord2s");
	glMultiTexCoord2sv = cast(pfglMultiTexCoord2sv)getProc("glMultiTexCoord2sv");
	glMultiTexCoord3d = cast(pfglMultiTexCoord3d)getProc("glMultiTexCoord3d");
	glMultiTexCoord3dv = cast(pfglMultiTexCoord3dv)getProc("glMultiTexCoord3dv");
	glMultiTexCoord3f = cast(pfglMultiTexCoord3f)getProc("glMultiTexCoord3f");
	glMultiTexCoord3fv = cast(pfglMultiTexCoord3fv)getProc("glMultiTexCoord3fv");
	glMultiTexCoord3i = cast(pfglMultiTexCoord3i)getProc("glMultiTexCoord3i");
	glMultiTexCoord3iv = cast(pfglMultiTexCoord3iv)getProc("glMultiTexCoord3iv");
	glMultiTexCoord3s = cast(pfglMultiTexCoord3s)getProc("glMultiTexCoord3s");
	glMultiTexCoord3sv = cast(pfglMultiTexCoord3sv)getProc("glMultiTexCoord3sv");
	glMultiTexCoord4d = cast(pfglMultiTexCoord4d)getProc("glMultiTexCoord4d");
	glMultiTexCoord4dv = cast(pfglMultiTexCoord4dv)getProc("glMultiTexCoord4dv");
	glMultiTexCoord4f = cast(pfglMultiTexCoord4f)getProc("glMultiTexCoord4f");
	glMultiTexCoord4fv = cast(pfglMultiTexCoord4fv)getProc("glMultiTexCoord4fv");
	glMultiTexCoord4i = cast(pfglMultiTexCoord4i)getProc("glMultiTexCoord4i");
	glMultiTexCoord4iv = cast(pfglMultiTexCoord4iv)getProc("glMultiTexCoord4iv");
	glMultiTexCoord4s = cast(pfglMultiTexCoord4s)getProc("glMultiTexCoord4s");
	glMultiTexCoord4sv = cast(pfglMultiTexCoord4sv)getProc("glMultiTexCoord4sv");
	glLoadTransposeMatrixd = cast(pfglLoadTransposeMatrixd)getProc("glLoadTransposeMatrixd");
	glLoadTransposeMatrixf = cast(pfglLoadTransposeMatrixf)getProc("glLoadTransposeMatrixf");
	glMultTransposeMatrixd = cast(pfglMultTransposeMatrixd)getProc("glMultTransposeMatrixd");
	glMultTransposeMatrixf = cast(pfglMultTransposeMatrixf)getProc("glMultTransposeMatrixf");
	glSampleCoverage = cast(pfglSampleCoverage)getProc("glSampleCoverage");
	glCompressedTexImage1D = cast(pfglCompressedTexImage1D)getProc("glCompressedTexImage1D");
	glCompressedTexImage2D = cast(pfglCompressedTexImage2D)getProc("glCompressedTexImage2D");
	glCompressedTexImage3D = cast(pfglCompressedTexImage3D)getProc("glCompressedTexImage3D");
	glCompressedTexSubImage1D = cast(pfglCompressedTexSubImage1D)getProc("glCompressedTexSubImage1D");
	glCompressedTexSubImage2D = cast(pfglCompressedTexSubImage2D)getProc("glCompressedTexSubImage2D");
	glCompressedTexSubImage3D = cast(pfglCompressedTexSubImage3D)getProc("glCompressedTexSubImage3D");
	glGetCompressedTexImage = cast(pfglGetCompressedTexImage)getProc("glGetCompressedTexImage");

	glBlendFuncSeparate = cast(pfglBlendFuncSeparate)getProc("glBlendFuncSeparate");
	glFogCoordf = cast(pfglFogCoordf)getProc("glFogCoordf");
	glFogCoordfv = cast(pfglFogCoordfv)getProc("glFogCoordfv");
	glFogCoordd = cast(pfglFogCoordd)getProc("glFogCoordd");
	glFogCoorddv = cast(pfglFogCoorddv)getProc("glFogCoorddv");
	glFogCoordPointer = cast(pfglFogCoordPointer)getProc("glFogCoordPointer");
	glMultiDrawArrays = cast(pfglMultiDrawArrays)getProc("glMultiDrawArrays");
	glMultiDrawElements = cast(pfglMultiDrawElements)getProc("glMultiDrawElements");
	glPointParameterf = cast(pfglPointParameterf)getProc("glPointParameterf");
	glPointParameterfv = cast(pfglPointParameterfv)getProc("glPointParameterfv");
	glPointParameteri = cast(pfglPointParameteri)getProc("glPointParameteri");
	glPointParameteriv = cast(pfglPointParameteriv)getProc("glPointParameteriv");
	glSecondaryColor3b = cast(pfglSecondaryColor3b)getProc("glSecondaryColor3b");
	glSecondaryColor3bv = cast(pfglSecondaryColor3bv)getProc("glSecondaryColor3bv");
	glSecondaryColor3d = cast(pfglSecondaryColor3d)getProc("glSecondaryColor3d");
	glSecondaryColor3dv = cast(pfglSecondaryColor3dv)getProc("glSecondaryColor3dv");
	glSecondaryColor3f = cast(pfglSecondaryColor3f)getProc("glSecondaryColor3f");
	glSecondaryColor3fv = cast(pfglSecondaryColor3fv)getProc("glSecondaryColor3fv");
	glSecondaryColor3i = cast(pfglSecondaryColor3i)getProc("glSecondaryColor3i");
	glSecondaryColor3iv = cast(pfglSecondaryColor3iv)getProc("glSecondaryColor3iv");
	glSecondaryColor3s = cast(pfglSecondaryColor3s)getProc("glSecondaryColor3s");
	glSecondaryColor3sv = cast(pfglSecondaryColor3sv)getProc("glSecondaryColor3sv");
	glSecondaryColor3ub = cast(pfglSecondaryColor3ub)getProc("glSecondaryColor3ub");
	glSecondaryColor3ubv = cast(pfglSecondaryColor3ubv)getProc("glSecondaryColor3ubv");
	glSecondaryColor3ui = cast(pfglSecondaryColor3ui)getProc("glSecondaryColor3ui");
	glSecondaryColor3uiv = cast(pfglSecondaryColor3uiv)getProc("glSecondaryColor3uiv");
	glSecondaryColor3us = cast(pfglSecondaryColor3us)getProc("glSecondaryColor3us");
	glSecondaryColor3usv = cast(pfglSecondaryColor3usv)getProc("glSecondaryColor3usv");
	glSecondaryColorPointer = cast(pfglSecondaryColorPointer)getProc("glSecondaryColorPointer");
	glWindowPos2d = cast(pfglWindowPos2d)getProc("glWindowPos2d");
	glWindowPos2dv = cast(pfglWindowPos2dv)getProc("glWindowPos2dv");
	glWindowPos2f = cast(pfglWindowPos2f)getProc("glWindowPos2f");
	glWindowPos2fv = cast(pfglWindowPos2fv)getProc("glWindowPos2fv");
	glWindowPos2i = cast(pfglWindowPos2i)getProc("glWindowPos2i");
	glWindowPos2iv = cast(pfglWindowPos2iv)getProc("glWindowPos2iv");
	glWindowPos2s = cast(pfglWindowPos2s)getProc("glWindowPos2s");
	glWindowPos2sv = cast(pfglWindowPos2sv)getProc("glWindowPos2sv");
	glWindowPos3d = cast(pfglWindowPos3d)getProc("glWindowPos3d");
	glWindowPos3dv = cast(pfglWindowPos3dv)getProc("glWindowPos3dv");
	glWindowPos3f = cast(pfglWindowPos3f)getProc("glWindowPos3f");
	glWindowPos3fv = cast(pfglWindowPos3fv)getProc("glWindowPos3fv");
	glWindowPos3i = cast(pfglWindowPos3i)getProc("glWindowPos3i");
	glWindowPos3iv = cast(pfglWindowPos3iv)getProc("glWindowPos3iv");
	glWindowPos3s = cast(pfglWindowPos3s)getProc("glWindowPos3s");
	glWindowPos3sv = cast(pfglWindowPos3sv)getProc("glWindowPos3sv");

	glGenQueries = cast(pfglGenQueries)getProc("glGenQueries");
	glDeleteQueries = cast(pfglDeleteQueries)getProc("glDeleteQueries");
	glIsQuery = cast(pfglIsQuery)getProc("glIsQuery");
	glBeginQuery = cast(pfglBeginQuery)getProc("glBeginQuery");
	glEndQuery = cast(pfglEndQuery)getProc("glEndQuery");
	glGetQueryiv = cast(pfglGetQueryiv)getProc("glGetQueryiv");
	glGetQueryObjectiv = cast(pfglGetQueryObjectiv)getProc("glGetQueryObjectiv");
	glGetQueryObjectuiv = cast(pfglGetQueryObjectuiv)getProc("glGetQueryObjectuiv");
	glBindBuffer = cast(pfglBindBuffer)getProc("glBindBuffer");
	glDeleteBuffers = cast(pfglDeleteBuffers)getProc("glDeleteBuffers");
	glGenBuffers = cast(pfglGenBuffers)getProc("glGenBuffers");
	glIsBuffer = cast(pfglIsBuffer)getProc("glIsBuffer");
	glBufferData = cast(pfglBufferData)getProc("glBufferData");
	glBufferSubData = cast(pfglBufferSubData)getProc("glBufferSubData");
	glGetBufferSubData = cast(pfglGetBufferSubData)getProc("glGetBufferSubData");
	glMapBuffer = cast(pfglMapBuffer)getProc("glMapBuffer");
	glUnmapBuffer = cast(pfglUnmapBuffer)getProc("glUnmapBuffer");
	glGetBufferParameteriv = cast(pfglGetBufferParameteriv)getProc("glGetBufferParameteriv");
	glGetBufferPointerv = cast(pfglGetBufferPointerv)getProc("glGetBufferPointerv");

	glBlendEquationSeparate = cast(pfglBlendEquationSeparate)getProc("glBlendEquationSeparate");
	glDrawBuffers = cast(pfglDrawBuffers)getProc("glDrawBuffers");
	glStencilOpSeparate = cast(pfglStencilOpSeparate)getProc("glStencilOpSeparate");
	glStencilFuncSeparate = cast(pfglStencilFuncSeparate)getProc("glStencilFuncSeparate");
	glStencilMaskSeparate = cast(pfglStencilMaskSeparate)getProc("glStencilMaskSeparate");
	glAttachShader = cast(pfglAttachShader)getProc("glAttachShader");
	glBindAttribLocation = cast(pfglBindAttribLocation)getProc("glBindAttribLocation");
	glCompileShader = cast(pfglCompileShader)getProc("glCompileShader");
	glCreateProgram = cast(pfglCreateProgram)getProc("glCreateProgram");
	glCreateShader = cast(pfglCreateShader)getProc("glCreateShader");
	glDeleteProgram = cast(pfglDeleteProgram)getProc("glDeleteProgram");
	glDeleteShader = cast(pfglDeleteShader)getProc("glDeleteShader");
	glDetachShader = cast(pfglDetachShader)getProc("glDetachShader");
	glDisableVertexAttribArray = cast(pfglDisableVertexAttribArray)getProc("glDisableVertexAttribArray");
	glEnableVertexAttribArray = cast(pfglEnableVertexAttribArray)getProc("glEnableVertexAttribArray");
	glGetActiveAttrib = cast(pfglGetActiveAttrib)getProc("glGetActiveAttrib");
	glGetActiveUniform = cast(pfglGetActiveUniform)getProc("glGetActiveUniform");
	glGetAttachedShaders = cast(pfglGetAttachedShaders)getProc("glGetAttachedShaders");
	glGetAttribLocation = cast(pfglGetAttribLocation)getProc("glGetAttribLocation");
	glGetProgramiv = cast(pfglGetProgramiv)getProc("glGetProgramiv");
	glGetProgramInfoLog = cast(pfglGetProgramInfoLog)getProc("glGetProgramInfoLog");
	glGetShaderiv = cast(pfglGetShaderiv)getProc("glGetShaderiv");
	glGetShaderInfoLog = cast(pfglGetShaderInfoLog)getProc("glGetShaderInfoLog");
	glGetShaderSource = cast(pfglGetShaderSource)getProc("glGetShaderSource");
	glGetUniformLocation = cast(pfglGetUniformLocation)getProc("glGetUniformLocation");
	glGetUniformfv = cast(pfglGetUniformfv)getProc("glGetUniformfv");
	glGetUniformiv = cast(pfglGetUniformiv)getProc("glGetUniformiv");
	glGetVertexAttribdv = cast(pfglGetVertexAttribdv)getProc("glGetVertexAttribdv");
	glGetVertexAttribfv = cast(pfglGetVertexAttribfv)getProc("glGetVertexAttribfv");
	glGetVertexAttribiv = cast(pfglGetVertexAttribiv)getProc("glGetVertexAttribiv");
	glGetVertexAttribPointerv = cast(pfglGetVertexAttribPointerv)getProc("glGetVertexAttribPointerv");
	glIsProgram = cast(pfglIsProgram)getProc("glIsProgram");
	glIsShader = cast(pfglIsShader)getProc("glIsShader");
	glLinkProgram = cast(pfglLinkProgram)getProc("glLinkProgram");
	glShaderSource = cast(pfglShaderSource)getProc("glShaderSource");
	glUseProgram = cast(pfglUseProgram)getProc("glUseProgram");
	glUniform1f = cast(pfglUniform1f)getProc("glUniform1f");
	glUniform2f = cast(pfglUniform2f)getProc("glUniform2f");
	glUniform3f = cast(pfglUniform3f)getProc("glUniform3f");
	glUniform4f = cast(pfglUniform4f)getProc("glUniform4f");
	glUniform1i = cast(pfglUniform1i)getProc("glUniform1i");
	glUniform2i = cast(pfglUniform2i)getProc("glUniform2i");
	glUniform3i = cast(pfglUniform3i)getProc("glUniform3i");
	glUniform4i = cast(pfglUniform4i)getProc("glUniform4i");
	glUniform1fv = cast(pfglUniform1fv)getProc("glUniform1fv");
	glUniform2fv = cast(pfglUniform2fv)getProc("glUniform2fv");
	glUniform3fv = cast(pfglUniform3fv)getProc("glUniform3fv");
	glUniform4fv = cast(pfglUniform4fv)getProc("glUniform4fv");
	glUniform1iv = cast(pfglUniform1iv)getProc("glUniform1iv");
	glUniform2iv = cast(pfglUniform2iv)getProc("glUniform2iv");
	glUniform3iv = cast(pfglUniform3iv)getProc("glUniform3iv");
	glUniform4iv = cast(pfglUniform4iv)getProc("glUniform4iv");
	glUniformMatrix2fv = cast(pfglUniformMatrix2fv)getProc("glUniformMatrix2fv");
	glUniformMatrix3fv = cast(pfglUniformMatrix3fv)getProc("glUniformMatrix3fv");
	glUniformMatrix4fv = cast(pfglUniformMatrix4fv)getProc("glUniformMatrix4fv");
	glValidateProgram = cast(pfglValidateProgram)getProc("glValidateProgram");
	glVertexAttrib1d = cast(pfglVertexAttrib1d)getProc("glVertexAttrib1d");
	glVertexAttrib1dv = cast(pfglVertexAttrib1dv)getProc("glVertexAttrib1dv");
	glVertexAttrib1f = cast(pfglVertexAttrib1f)getProc("glVertexAttrib1f");
	glVertexAttrib1fv = cast(pfglVertexAttrib1fv)getProc("glVertexAttrib1fv");
	glVertexAttrib1s = cast(pfglVertexAttrib1s)getProc("glVertexAttrib1s");
	glVertexAttrib1sv = cast(pfglVertexAttrib1sv)getProc("glVertexAttrib1sv");
	glVertexAttrib2d = cast(pfglVertexAttrib2d)getProc("glVertexAttrib2d");
	glVertexAttrib2dv = cast(pfglVertexAttrib2dv)getProc("glVertexAttrib2dv");
	glVertexAttrib2f = cast(pfglVertexAttrib2f)getProc("glVertexAttrib2f");
	glVertexAttrib2fv = cast(pfglVertexAttrib2fv)getProc("glVertexAttrib2fv");
	glVertexAttrib2s = cast(pfglVertexAttrib2s)getProc("glVertexAttrib2s");
	glVertexAttrib2sv = cast(pfglVertexAttrib2sv)getProc("glVertexAttrib2sv");
	glVertexAttrib3d = cast(pfglVertexAttrib3d)getProc("glVertexAttrib3d");
	glVertexAttrib3dv = cast(pfglVertexAttrib3dv)getProc("glVertexAttrib3dv");
	glVertexAttrib3f = cast(pfglVertexAttrib3f)getProc("glVertexAttrib3f");
	glVertexAttrib3fv = cast(pfglVertexAttrib3fv)getProc("glVertexAttrib3fv");
	glVertexAttrib3s = cast(pfglVertexAttrib3s)getProc("glVertexAttrib3s");
	glVertexAttrib3sv = cast(pfglVertexAttrib3sv)getProc("glVertexAttrib3sv");
	glVertexAttrib4Nbv = cast(pfglVertexAttrib4Nbv)getProc("glVertexAttrib4Nbv");
	glVertexAttrib4Niv = cast(pfglVertexAttrib4Niv)getProc("glVertexAttrib4Niv");
	glVertexAttrib4Nsv = cast(pfglVertexAttrib4Nsv)getProc("glVertexAttrib4Nsv");
	glVertexAttrib4Nub = cast(pfglVertexAttrib4Nub)getProc("glVertexAttrib4Nub");
	glVertexAttrib4Nubv = cast(pfglVertexAttrib4Nubv)getProc("glVertexAttrib4Nubv");
	glVertexAttrib4Nuiv = cast(pfglVertexAttrib4Nuiv)getProc("glVertexAttrib4Nuiv");
	glVertexAttrib4Nusv = cast(pfglVertexAttrib4Nusv)getProc("glVertexAttrib4Nusv");
	glVertexAttrib4bv = cast(pfglVertexAttrib4bv)getProc("glVertexAttrib4bv");
	glVertexAttrib4d = cast(pfglVertexAttrib4d)getProc("glVertexAttrib4d");
	glVertexAttrib4dv = cast(pfglVertexAttrib4dv)getProc("glVertexAttrib4dv");
	glVertexAttrib4f = cast(pfglVertexAttrib4f)getProc("glVertexAttrib4f");
	glVertexAttrib4fv = cast(pfglVertexAttrib4fv)getProc("glVertexAttrib4fv");
	glVertexAttrib4iv = cast(pfglVertexAttrib4iv)getProc("glVertexAttrib4iv");
	glVertexAttrib4s = cast(pfglVertexAttrib4s)getProc("glVertexAttrib4s");
	glVertexAttrib4sv = cast(pfglVertexAttrib4sv)getProc("glVertexAttrib4sv");
	glVertexAttrib4ubv = cast(pfglVertexAttrib4ubv)getProc("glVertexAttrib4ubv");
	glVertexAttrib4uiv = cast(pfglVertexAttrib4uiv)getProc("glVertexAttrib4uiv");
	glVertexAttrib4usv = cast(pfglVertexAttrib4usv)getProc("glVertexAttrib4usv");
	glVertexAttribPointer = cast(pfglVertexAttribPointer)getProc("glVertexAttribPointer");

	std.file.write("gl.log",failed);
}

static ~this () {
	ExeModule_Release(gldrv);
}


extern (Windows)
{


typedef void function(float) pfglClearIndex;
typedef void function(GLclampf, GLclampf, GLclampf, GLclampf) pfglClearColor;
typedef void function(GLbitfield) pfglClear;
typedef void function(uint) pfglIndexMask;
typedef void function(bool, bool, bool, bool) pfglColorMask;
typedef void function(GLenum, GLclampf) pfglAlphaFunc;
typedef void function(GLenum, GLenum) pfglBlendFunc;
typedef void function(GLenum) pfglLogicOp;
typedef void function(GLenum) pfglCullFace;
typedef void function(GLenum) pfglFrontFace;
typedef void function(float) pfglPointSize;
typedef void function(float) pfglLineWidth;
typedef void function(int, GLushort) pfglLineStipple;
typedef void function(GLenum, GLenum) pfglPolygonMode;
typedef void function(float, float) pfglPolygonOffset;
typedef void function(GLubyte*) pfglPolygonStipple;
typedef void function(GLubyte*) pfglGetPolygonStipple;
typedef void function(bool) pfglEdgeFlag;
typedef void function(bool*) pfglEdgeFlagv;
typedef void function(int, int, GLsizei, GLsizei) pfglScissor;
typedef void function(GLenum, GLdouble*) pfglClipPlane;
typedef void function(GLenum, GLdouble*) pfglGetClipPlane;
typedef void function(GLenum) pfglDrawBuffer;
typedef void function(GLenum) pfglReadBuffer;
typedef void function(GLenum) pfglEnable;
typedef void function(GLenum) pfglDisable;
typedef bool function(GLenum) pfglIsEnabled;
typedef void function(GLenum) pfglEnableClientState;
typedef void function(GLenum) pfglDisableClientState;
typedef void function(GLenum, bool*) pfglGetBooleanv;
typedef void function(GLenum, GLdouble*) pfglGetDoublev;
typedef void function(GLenum, float*) pfglGetFloatv;
typedef void function(GLenum, int*) pfglGetIntegerv;
typedef void function(GLbitfield) pfglPushAttrib;
typedef void function() pfglPopAttrib;
typedef void function(GLbitfield) pfglPushClientAttrib;
typedef void function() pfglPopClientAttrib;
typedef int function(GLenum) pfglRenderMode;
typedef GLenum function() pfglGetError;
typedef GLubyte* function(GLenum) pfglGetString;
typedef void function() pfglFinish;
typedef void function() pfglFlush;
typedef void function(GLenum, GLenum) pfglHint;

pfglClearIndex			glClearIndex;
pfglClearColor			glClearColor;
pfglClear			glClear;
pfglIndexMask			glIndexMask;
pfglColorMask			glColorMask;
pfglAlphaFunc			glAlphaFunc;
pfglBlendFunc			glBlendFunc;
pfglLogicOp			glLogicOp;
pfglCullFace			glCullFace;
pfglFrontFace			glFrontFace;
pfglPointSize			glPointSize;
pfglLineWidth			glLineWidth;
pfglLineStipple			glLineStipple;
pfglPolygonMode			glPolygonMode;
pfglPolygonOffset		glPolygonOffset;
pfglPolygonStipple		glPolygonStipple;
pfglGetPolygonStipple		glGetPolygonStipple;
pfglEdgeFlag			glEdgeFlag;
pfglEdgeFlagv			glEdgeFlagv;
pfglScissor			glScissor;
pfglClipPlane			glClipPlane;
pfglGetClipPlane		glGetClipPlane;
pfglDrawBuffer			glDrawBuffer;
pfglReadBuffer			glReadBuffer;
pfglEnable			glEnable;
pfglDisable			glDisable;
pfglIsEnabled			glIsEnabled;
pfglEnableClientState		glEnableClientState;
pfglDisableClientState		glDisableClientState;
pfglGetBooleanv			glGetBooleanv;
pfglGetDoublev			glGetDoublev;
pfglGetFloatv			glGetFloatv;
pfglGetIntegerv			glGetIntegerv;
pfglPushAttrib			glPushAttrib;
pfglPopAttrib			glPopAttrib;
pfglPushClientAttrib		glPushClientAttrib;
pfglPopClientAttrib		glPopClientAttrib;
pfglRenderMode			glRenderMode;
pfglGetError			glGetError;
pfglGetString			glGetString;
pfglFinish			glFinish;
pfglFlush			glFlush;
pfglHint			glHint;

// Depth Buffer
typedef void function(GLclampd) pfglClearDepth;
typedef void function(GLenum) pfglDepthFunc;
typedef void function(bool) pfglDepthMask;
typedef void function(GLclampd, GLclampd) pfglDepthRange;

pfglClearDepth			glClearDepth;
pfglDepthFunc			glDepthFunc;
pfglDepthMask			glDepthMask;
pfglDepthRange			glDepthRange;

// Accumulation Buffer
typedef void function(float, float, float, float) pfglClearAccum;
typedef void function(GLenum, float) pfglAccum;

pfglClearAccum			glClearAccum;
pfglAccum			glAccum;

// Transformation
typedef void function(GLenum) pfglMatrixMode;
typedef void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) pfglOrtho;
typedef void function(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) pfglFrustum;
typedef void function(int, int, GLsizei, GLsizei) pfglViewport;
typedef void function() pfglPushMatrix;
typedef void function() pfglPopMatrix;
typedef void function() pfglLoadIdentity;
typedef void function(GLdouble*) pfglLoadMatrixd;
typedef void function(float*) pfglLoadMatrixf;
typedef void function(GLdouble*) pfglMultMatrixd;
typedef void function(float*) pfglMultMatrixf;
typedef void function(GLdouble, GLdouble, GLdouble, GLdouble) pfglRotated;
typedef void function(float, float, float, float) pfglRotatef;
typedef void function(GLdouble, GLdouble, GLdouble) pfglScaled;
typedef void function(float, float, float) pfglScalef;
typedef void function(GLdouble, GLdouble, GLdouble) pfglTranslated;
typedef void function(float, float, float) pfglTranslatef;

pfglMatrixMode			glMatrixMode;
pfglOrtho			glOrtho;
pfglFrustum			glFrustum;
pfglViewport			glViewport;
pfglPushMatrix			glPushMatrix;
pfglPopMatrix			glPopMatrix;
pfglLoadIdentity		glLoadIdentity;
pfglLoadMatrixd			glLoadMatrixd;
pfglLoadMatrixf			glLoadMatrixf;
pfglMultMatrixd			glMultMatrixd;
pfglMultMatrixf			glMultMatrixf;
pfglRotated			glRotated;
pfglRotatef			glRotatef;
pfglScaled			glScaled;
pfglScalef			glScalef;
pfglTranslated			glTranslated;
pfglTranslatef			glTranslatef;

// Display Lists
typedef bool function(uint) pfglIsList;
typedef void function(uint, GLsizei) pfglDeleteLists;
typedef uint function(GLsizei) pfglGenLists;
typedef void function(uint, GLenum) pfglNewList;
typedef void function() pfglEndList;
typedef void function(uint) pfglCallList;
typedef void function(GLsizei, GLenum, void*) pfglCallLists;
typedef void function(uint) pfglListBase;

pfglIsList			glIsList;
pfglDeleteLists			glDeleteLists;
pfglGenLists			glGenLists;
pfglNewList			glNewList;
pfglEndList			glEndList;
pfglCallList			glCallList;
pfglCallLists			glCallLists;
pfglListBase			glListBase;

// Drawing Functions
typedef void function(GLenum) pfglBegin;
typedef void function() pfglEnd;
typedef void function(GLdouble, GLdouble) pfglVertex2d;
typedef void function(float, float) pfglVertex2f;
typedef void function(int, int) pfglVertex2i;
typedef void function(GLshort, GLshort) pfglVertex2s;
typedef void function(GLdouble, GLdouble, GLdouble) pfglVertex3d;
typedef void function(float, float, float) pfglVertex3f;
typedef void function(int, int, int) pfglVertex3i;
typedef void function(GLshort, GLshort, GLshort) pfglVertex3s;
typedef void function(GLdouble, GLdouble, GLdouble, GLdouble) pfglVertex4d;
typedef void function(float, float, float, float) pfglVertex4f;
typedef void function(int, int, int, int) pfglVertex4i;
typedef void function(GLshort, GLshort, GLshort, GLshort) pfglVertex4s;
typedef void function(GLdouble*) pfglVertex2dv;
typedef void function(float*) pfglVertex2fv;
typedef void function(int*) pfglVertex2iv;
typedef void function(GLshort*) pfglVertex2sv;
typedef void function(GLdouble*) pfglVertex3dv;
typedef void function(float*) pfglVertex3fv;
typedef void function(int*) pfglVertex3iv;
typedef void function(GLshort*) pfglVertex3sv;
typedef void function(GLdouble*) pfglVertex4dv;
typedef void function(float*) pfglVertex4fv;
typedef void function(int*) pfglVertex4iv;
typedef void function(GLshort*) pfglVertex4sv;
typedef void function(GLbyte, GLbyte, GLbyte) pfglNormal3b;
typedef void function(GLdouble, GLdouble, GLdouble) pfglNormal3d;
typedef void function(float, float, float) pfglNormal3f;
typedef void function(int, int, int) pfglNormal3i;
typedef void function(GLshort, GLshort, GLshort) pfglNormal3s;
typedef void function(GLbyte*) pfglNormal3bv;
typedef void function(GLdouble*) pfglNormal3dv;
typedef void function(float*) pfglNormal3fv;
typedef void function(int*) pfglNormal3iv;
typedef void function(GLshort*) pfglNormal3sv;
typedef void function(GLdouble) pfglIndexd;
typedef void function(float) pfglIndexf;
typedef void function(int) pfglIndexi;
typedef void function(GLshort) pfglIndexs;
typedef void function(GLubyte) pfglIndexub;
typedef void function(GLdouble*) pfglIndexdv;
typedef void function(float*) pfglIndexfv;
typedef void function(int*) pfglIndexiv;
typedef void function(GLshort*) pfglIndexsv;
typedef void function(GLubyte*) pfglIndexubv;
typedef void function(GLbyte, GLbyte, GLbyte) pfglColor3b;
typedef void function(GLdouble, GLdouble, GLdouble) pfglColor3d;
typedef void function(float, float, float) pfglColor3f;
typedef void function(int, int, int) pfglColor3i;
typedef void function(GLshort, GLshort, GLshort) pfglColor3s;
typedef void function(GLubyte, GLubyte, GLubyte) pfglColor3ub;
typedef void function(uint, uint, uint) pfglColor3ui;
typedef void function(GLushort, GLushort, GLushort) pfglColor3us;
typedef void function(GLbyte, GLbyte, GLbyte, GLbyte) pfglColor4b;
typedef void function(GLdouble, GLdouble, GLdouble, GLdouble) pfglColor4d;
typedef void function(float, float, float, float) pfglColor4f;
typedef void function(int, int, int, int) pfglColor4i;
typedef void function(GLshort, GLshort, GLshort, GLshort) pfglColor4s;
typedef void function(GLubyte, GLubyte, GLubyte, GLubyte) pfglColor4ub;
typedef void function(uint, uint, uint, uint) pfglColor4ui;
typedef void function(GLushort, GLushort, GLushort, GLushort) pfglColor4us;
typedef void function(GLbyte*) pfglColor3bv;
typedef void function(GLdouble*) pfglColor3dv;
typedef void function(float*) pfglColor3fv;
typedef void function(int*) pfglColor3iv;
typedef void function(GLshort*) pfglColor3sv;
typedef void function(GLubyte*) pfglColor3ubv;
typedef void function(uint*) pfglColor3uiv;
typedef void function(GLushort*) pfglColor3usv;
typedef void function(GLbyte*) pfglColor4bv;
typedef void function(GLdouble*) pfglColor4dv;
typedef void function(float*) pfglColor4fv;
typedef void function(int*) pfglColor4iv;
typedef void function(GLshort*) pfglColor4sv;
typedef void function(GLubyte*) pfglColor4ubv;
typedef void function(uint*) pfglColor4uiv;
typedef void function(GLushort*) pfglColor4usv;
typedef void function(GLdouble) pfglTexCoord1d;
typedef void function(float) pfglTexCoord1f;
typedef void function(int) pfglTexCoord1i;
typedef void function(GLshort) pfglTexCoord1s;
typedef void function(GLdouble, GLdouble) pfglTexCoord2d;
typedef void function(float, float) pfglTexCoord2f;
typedef void function(int, int) pfglTexCoord2i;
typedef void function(GLshort, GLshort) pfglTexCoord2s;
typedef void function(GLdouble, GLdouble, GLdouble) pfglTexCoord3d;
typedef void function(float, float, float) pfglTexCoord3f;
typedef void function(int, int, int) pfglTexCoord3i;
typedef void function(GLshort, GLshort, GLshort) pfglTexCoord3s;
typedef void function(GLdouble, GLdouble, GLdouble, GLdouble) pfglTexCoord4d;
typedef void function(float, float, float, float) pfglTexCoord4f;
typedef void function(int, int, int, int) pfglTexCoord4i;
typedef void function(GLshort, GLshort, GLshort, GLshort) pfglTexCoord4s;
typedef void function(GLdouble*) pfglTexCoord1dv;
typedef void function(float*) pfglTexCoord1fv;
typedef void function(int*) pfglTexCoord1iv;
typedef void function(GLshort*) pfglTexCoord1sv;
typedef void function(GLdouble*) pfglTexCoord2dv;
typedef void function(float*) pfglTexCoord2fv;
typedef void function(int*) pfglTexCoord2iv;
typedef void function(GLshort*) pfglTexCoord2sv;
typedef void function(GLdouble*) pfglTexCoord3dv;
typedef void function(float*) pfglTexCoord3fv;
typedef void function(int*) pfglTexCoord3iv;
typedef void function(GLshort*) pfglTexCoord3sv;
typedef void function(GLdouble*) pfglTexCoord4dv;
typedef void function(float*) pfglTexCoord4fv;
typedef void function(int*) pfglTexCoord4iv;
typedef void function(GLshort*) pfglTexCoord4sv;
typedef void function(GLdouble, GLdouble) pfglRasterPos2d;
typedef void function(float, float) pfglRasterPos2f;
typedef void function(int, int) pfglRasterPos2i;
typedef void function(GLshort, GLshort) pfglRasterPos2s;
typedef void function(GLdouble, GLdouble, GLdouble) pfglRasterPos3d;
typedef void function(float, float, float) pfglRasterPos3f;
typedef void function(int, int, int) pfglRasterPos3i;
typedef void function(GLshort, GLshort, GLshort) pfglRasterPos3s;
typedef void function(GLdouble, GLdouble, GLdouble, GLdouble) pfglRasterPos4d;
typedef void function(float, float, float, float) pfglRasterPos4f;
typedef void function(int, int, int, int) pfglRasterPos4i;
typedef void function(GLshort, GLshort, GLshort, GLshort) pfglRasterPos4s;
typedef void function(GLdouble*) pfglRasterPos2dv;
typedef void function(float*) pfglRasterPos2fv;
typedef void function(int*) pfglRasterPos2iv;
typedef void function(GLshort*) pfglRasterPos2sv;
typedef void function(GLdouble*) pfglRasterPos3dv;
typedef void function(float*) pfglRasterPos3fv;
typedef void function(int*) pfglRasterPos3iv;
typedef void function(GLshort*) pfglRasterPos3sv;
typedef void function(GLdouble*) pfglRasterPos4dv;
typedef void function(float*) pfglRasterPos4fv;
typedef void function(int*) pfglRasterPos4iv;
typedef void function(GLshort*) pfglRasterPos4sv;
typedef void function(GLdouble, GLdouble, GLdouble, GLdouble) pfglRectd;
typedef void function(float, float, float, float) pfglRectf;
typedef void function(int, int, int, int) pfglRecti;
typedef void function(GLshort, GLshort, GLshort, GLshort) pfglRects;
typedef void function(GLdouble*, GLdouble*) pfglRectdv;
typedef void function(float*, float*) pfglRectfv;
typedef void function(int*, int*) pfglRectiv;
typedef void function(GLshort*, GLshort*) pfglRectsv;

pfglBegin			glBegin;
pfglEnd				glEnd;
pfglVertex2d			glVertex2d;
pfglVertex2f			glVertex2f;
pfglVertex2i			glVertex2i;
pfglVertex2s			glVertex2s;
pfglVertex3d			glVertex3d;
pfglVertex3f			glVertex3f;
pfglVertex3i			glVertex3i;
pfglVertex3s			glVertex3s;
pfglVertex4d			glVertex4d;
pfglVertex4f			glVertex4f;
pfglVertex4i			glVertex4i;
pfglVertex4s			glVertex4s;
pfglVertex2dv			glVertex2dv;
pfglVertex2fv			glVertex2fv;
pfglVertex2iv			glVertex2iv;
pfglVertex2sv			glVertex2sv;
pfglVertex3dv			glVertex3dv;
pfglVertex3fv			glVertex3fv;
pfglVertex3iv			glVertex3iv;
pfglVertex3sv			glVertex3sv;
pfglVertex4dv			glVertex4dv;
pfglVertex4fv			glVertex4fv;
pfglVertex4iv			glVertex4iv;
pfglVertex4sv			glVertex4sv;
pfglNormal3b			glNormal3b;
pfglNormal3d			glNormal3d;
pfglNormal3f			glNormal3f;
pfglNormal3i			glNormal3i;
pfglNormal3s			glNormal3s;
pfglNormal3bv			glNormal3bv;
pfglNormal3dv			glNormal3dv;
pfglNormal3fv			glNormal3fv;
pfglNormal3iv			glNormal3iv;
pfglNormal3sv			glNormal3sv;
pfglIndexd			glIndexd;
pfglIndexf			glIndexf;
pfglIndexi			glIndexi;
pfglIndexs			glIndexs;
pfglIndexub			glIndexub;
pfglIndexdv			glIndexdv;
pfglIndexfv			glIndexfv;
pfglIndexiv			glIndexiv;
pfglIndexsv			glIndexsv;
pfglIndexubv			glIndexubv;
pfglColor3b			glColor3b;
pfglColor3d			glColor3d;
pfglColor3f			glColor3f;
pfglColor3i			glColor3i;
pfglColor3s			glColor3s;
pfglColor3ub			glColor3ub;
pfglColor3ui			glColor3ui;
pfglColor3us			glColor3us;
pfglColor4b			glColor4b;
pfglColor4d			glColor4d;
pfglColor4f			glColor4f;
pfglColor4i			glColor4i;
pfglColor4s			glColor4s;
pfglColor4ub			glColor4ub;
pfglColor4ui			glColor4ui;
pfglColor4us			glColor4us;
pfglColor3bv			glColor3bv;
pfglColor3dv			glColor3dv;
pfglColor3fv			glColor3fv;
pfglColor3iv			glColor3iv;
pfglColor3sv			glColor3sv;
pfglColor3ubv			glColor3ubv;
pfglColor3uiv			glColor3uiv;
pfglColor3usv			glColor3usv;
pfglColor4bv			glColor4bv;
pfglColor4dv			glColor4dv;
pfglColor4fv			glColor4fv;
pfglColor4iv			glColor4iv;
pfglColor4sv			glColor4sv;
pfglColor4ubv			glColor4ubv;
pfglColor4uiv			glColor4uiv;
pfglColor4usv			glColor4usv;
pfglTexCoord1d			glTexCoord1d;
pfglTexCoord1f			glTexCoord1f;
pfglTexCoord1i			glTexCoord1i;
pfglTexCoord1s			glTexCoord1s;
pfglTexCoord2d			glTexCoord2d;
pfglTexCoord2f			glTexCoord2f;
pfglTexCoord2i			glTexCoord2i;
pfglTexCoord2s			glTexCoord2s;
pfglTexCoord3d			glTexCoord3d;
pfglTexCoord3f			glTexCoord3f;
pfglTexCoord3i			glTexCoord3i;
pfglTexCoord3s			glTexCoord3s;
pfglTexCoord4d			glTexCoord4d;
pfglTexCoord4f			glTexCoord4f;
pfglTexCoord4i			glTexCoord4i;
pfglTexCoord4s			glTexCoord4s;
pfglTexCoord1dv			glTexCoord1dv;
pfglTexCoord1fv			glTexCoord1fv;
pfglTexCoord1iv			glTexCoord1iv;
pfglTexCoord1sv			glTexCoord1sv;
pfglTexCoord2dv			glTexCoord2dv;
pfglTexCoord2fv			glTexCoord2fv;
pfglTexCoord2iv			glTexCoord2iv;
pfglTexCoord2sv			glTexCoord2sv;
pfglTexCoord3dv			glTexCoord3dv;
pfglTexCoord3fv			glTexCoord3fv;
pfglTexCoord3iv			glTexCoord3iv;
pfglTexCoord3sv			glTexCoord3sv;
pfglTexCoord4dv			glTexCoord4dv;
pfglTexCoord4fv			glTexCoord4fv;
pfglTexCoord4iv			glTexCoord4iv;
pfglTexCoord4sv			glTexCoord4sv;
pfglRasterPos2d			glRasterPos2d;
pfglRasterPos2f			glRasterPos2f;
pfglRasterPos2i			glRasterPos2i;
pfglRasterPos2s			glRasterPos2s;
pfglRasterPos3d			glRasterPos3d;
pfglRasterPos3f			glRasterPos3f;
pfglRasterPos3i			glRasterPos3i;
pfglRasterPos3s			glRasterPos3s;
pfglRasterPos4d			glRasterPos4d;
pfglRasterPos4f			glRasterPos4f;
pfglRasterPos4i			glRasterPos4i;
pfglRasterPos4s			glRasterPos4s;
pfglRasterPos2dv		glRasterPos2dv;
pfglRasterPos2fv		glRasterPos2fv;
pfglRasterPos2iv		glRasterPos2iv;
pfglRasterPos2sv		glRasterPos2sv;
pfglRasterPos3dv		glRasterPos3dv;
pfglRasterPos3fv		glRasterPos3fv;
pfglRasterPos3iv		glRasterPos3iv;
pfglRasterPos3sv		glRasterPos3sv;
pfglRasterPos4dv		glRasterPos4dv;
pfglRasterPos4fv		glRasterPos4fv;
pfglRasterPos4iv		glRasterPos4iv;
pfglRasterPos4sv		glRasterPos4sv;
pfglRectd			glRectd;
pfglRectf			glRectf;
pfglRecti			glRecti;
pfglRects			glRects;
pfglRectdv			glRectdv;
pfglRectfv			glRectfv;
pfglRectiv			glRectiv;
pfglRectsv			glRectsv;

// Vertex Arrays
typedef void function(int, GLenum, GLsizei stride, void*) pfglVertexPointer;
typedef void function(GLenum, GLsizei, void*) pfglNormalPointer;
typedef void function(int, GLenum, GLsizei, void*) pfglColorPointer;
typedef void function(GLenum, GLsizei, void*) pfglIndexPointer;
typedef void function(int, GLenum, GLsizei stride, void* ptr) pfglTexCoordPointer;
typedef void function(GLsizei, void* ptr) pfglEdgeFlagPointer;
typedef void function(GLenum, void**) pfglGetPointerv;
typedef void function(int) pfglArrayElement;
typedef void function(GLenum, int, GLsizei) pfglDrawArrays;
typedef void function(GLenum, GLsizei, GLenum, void*) pfglDrawElements;
typedef void function(GLenum, GLsizei, void*) pfinterleavedArrays;

pfglVertexPointer		glVertexPointer;
pfglNormalPointer		glNormalPointer;
pfglColorPointer		glColorPointer;
pfglIndexPointer		glIndexPointer;
pfglTexCoordPointer		glTexCoordPointer;
pfglEdgeFlagPointer		glEdgeFlagPointer;
pfglGetPointerv			glGetPointerv;
pfglArrayElement		glArrayElement;
pfglDrawArrays			glDrawArrays;
pfglDrawElements		glDrawElements;
pfinterleavedArrays		interleavedArrays;

// Lighting
typedef void function(GLenum) pfglShadeModel;
typedef void function(GLenum, GLenum, float) pfglLightf;
typedef void function(GLenum, GLenum, int) pfglLighti;
typedef void function(GLenum, GLenum, float*) pfglLightfv;
typedef void function(GLenum, GLenum, int*) pfglLightiv;
typedef void function(GLenum, GLenum, float*) pfglGetLightfv;
typedef void function(GLenum, GLenum, int*) pfglGetLightiv;
typedef void function(GLenum, float) pfglLightModelf;
typedef void function(GLenum, int) pfglLightModeli;
typedef void function(GLenum, float*) pfglLightModelfv;
typedef void function(GLenum, int*) pfglLightModeliv;
typedef void function(GLenum, GLenum, float) pfglMaterialf;
typedef void function(GLenum, GLenum, int) pfglMateriali;
typedef void function(GLenum, GLenum, float*) pfglMaterialfv;
typedef void function(GLenum, GLenum, int*) pfglMaterialiv;
typedef void function(GLenum, GLenum, float*) pfglGetMaterialfv;
typedef void function(GLenum, GLenum, int*) pfglGetMaterialiv;
typedef void function(GLenum, GLenum) pfglColorMaterial;

pfglShadeModel			glShadeModel;
pfglLightf			glLightf;
pfglLighti			glLighti;
pfglLightfv			glLightfv;
pfglLightiv			glLightiv;
pfglGetLightfv			glGetLightfv;
pfglGetLightiv			glGetLightiv;
pfglLightModelf			glLightModelf;
pfglLightModeli			glLightModeli;
pfglLightModelfv		glLightModelfv;
pfglLightModeliv		glLightModeliv;
pfglMaterialf			glMaterialf;
pfglMateriali			glMateriali;
pfglMaterialfv			glMaterialfv;
pfglMaterialiv			glMaterialiv;
pfglGetMaterialfv		glGetMaterialfv;
pfglGetMaterialiv		glGetMaterialiv;
pfglColorMaterial		glColorMaterial;

// Raster functions
typedef void function(float, float) pfglPixelZoom;
typedef void function(GLenum, float) pfglPixelStoref;
typedef void function(GLenum, int) pfglPixelStorei;
typedef void function(GLenum, float) pfglPixelTransferf;
typedef void function(GLenum, int) pfglPixelTransferi;
typedef void function(GLenum, GLsizei, float*) pfglPixelMapfv;
typedef void function(GLenum, GLsizei, uint*) pfglPixelMapuiv;
typedef void function(GLenum, GLsizei, GLushort*) pfglPixelMapusv;
typedef void function(GLenum, float*) pfglGetPixelMapfv;
typedef void function(GLenum, uint*) pfglGetPixelMapuiv;
typedef void function(GLenum, GLushort*) pfglGetPixelMapusv;
typedef void function(GLsizei, GLsizei, float, float, float, float, GLubyte*) pfglBitmap;
typedef void function(int, int, GLsizei, GLsizei, GLenum, GLenum, void*) pfglReadPixels;
typedef void function(GLsizei, GLsizei, GLenum, GLenum, void*) pfglDrawPixels;
typedef void function(int, int, GLsizei, GLsizei, GLenum) pfglCopyPixels;

pfglPixelZoom			glPixelZoom;
pfglPixelStoref			glPixelStoref;
pfglPixelStorei			glPixelStorei;
pfglPixelTransferf		glPixelTransferf;
pfglPixelTransferi		glPixelTransferi;
pfglPixelMapfv			glPixelMapfv;
pfglPixelMapuiv			glPixelMapuiv;
pfglPixelMapusv			glPixelMapusv;
pfglGetPixelMapfv		glGetPixelMapfv;
pfglGetPixelMapuiv		glGetPixelMapuiv;
pfglGetPixelMapusv		glGetPixelMapusv;
pfglBitmap			glBitmap;
pfglReadPixels			glReadPixels;
pfglDrawPixels			glDrawPixels;
pfglCopyPixels			glCopyPixels;

// Stenciling
typedef void function(GLenum, int, uint) pfglStencilFunc;
typedef void function(uint) pfglStencilMask;
typedef void function(GLenum, GLenum, GLenum) pfglStencilOp;
typedef void function(int) pfglClearStencil;

pfglStencilFunc			glStencilFunc;
pfglStencilMask			glStencilMask;
pfglStencilOp			glStencilOp;
pfglClearStencil		glClearStencil;

// Texture mapping
typedef void function(GLenum, GLenum, GLdouble) pfglTexGend;
typedef void function(GLenum, GLenum, float) pfglTexGenf;
typedef void function(GLenum, GLenum, int) pfglTexGeni;
typedef void function(GLenum, GLenum, GLdouble*) pfglTexGendv;
typedef void function(GLenum, GLenum, float*) pfglTexGenfv;
typedef void function(GLenum, GLenum, int*) pfglTexGeniv;
typedef void function(GLenum, GLenum, GLdouble*) pfglGetTexGendv;
typedef void function(GLenum, GLenum, float*) pfglGetTexGenfv;
typedef void function(GLenum, GLenum, int*) pfglGetTexGeniv;
typedef void function(GLenum, GLenum, float) pfglTexEnvf;
typedef void function(GLenum, GLenum, int) pfglTexEnvi;
typedef void function(GLenum, GLenum, float*) pfglTexEnvfv;
typedef void function(GLenum, GLenum, int*) pfglTexEnviv;
typedef void function(GLenum, GLenum, float*) pfglGetTexEnvfv;
typedef void function(GLenum, GLenum, int*) pfglGetTexEnviv;
typedef void function(GLenum, GLenum, float) pfglTexParameterf;
typedef void function(GLenum, GLenum, int) pfglTexParameteri;
typedef void function(GLenum, GLenum, float*) pfglTexParameterfv;
typedef void function(GLenum, GLenum, int*) pfglTexParameteriv;
typedef void function(GLenum, GLenum, float*) pfglGetTexParameterfv;
typedef void function(GLenum, GLenum, int*) pfglGetTexParameteriv;
typedef void function(GLenum, int, GLenum, float*) pfglGetTexLevelParameterfv;
typedef void function(GLenum, int, GLenum, int*) pfglGetTexLevelParameteriv;
typedef void function(GLenum, int, int, GLsizei, int, GLenum, GLenum, void*) pfglTexImage1D;
typedef void function(GLenum, int, int, GLsizei, GLsizei, int, GLenum, GLenum, void*) pfglTexImage2D;
typedef void function(GLenum, int, GLenum, GLenum, void*) pfglGetTexImage;

pfglTexGend			glTexGend;
pfglTexGenf			glTexGenf;
pfglTexGeni			glTexGeni;
pfglTexGendv			glTexGendv;
pfglTexGenfv			glTexGenfv;
pfglTexGeniv			glTexGeniv;
pfglGetTexGendv			glGetTexGendv;
pfglGetTexGenfv			glGetTexGenfv;
pfglGetTexGeniv			glGetTexGeniv;
pfglTexEnvf			glTexEnvf;
pfglTexEnvi			glTexEnvi;
pfglTexEnvfv			glTexEnvfv;
pfglTexEnviv			glTexEnviv;
pfglGetTexEnvfv			glGetTexEnvfv;
pfglGetTexEnviv			glGetTexEnviv;
pfglTexParameterf		glTexParameterf;
pfglTexParameteri		glTexParameteri;
pfglTexParameterfv		glTexParameterfv;
pfglTexParameteriv		glTexParameteriv;
pfglGetTexParameterfv		glGetTexParameterfv;
pfglGetTexParameteriv		glGetTexParameteriv;
pfglGetTexLevelParameterfv	glGetTexLevelParameterfv;
pfglGetTexLevelParameteriv	glGetTexLevelParameteriv;
pfglTexImage1D			glTexImage1D;
pfglTexImage2D			glTexImage2D;
pfglGetTexImage			glGetTexImage;

// Evaluators
typedef void function(GLenum, GLdouble, GLdouble, int, int, GLdouble*) pfglMap1d;
typedef void function(GLenum, float, float, int, int, float*) pfglMap1f;
typedef void function(GLenum, GLdouble, GLdouble, int, int, GLdouble, GLdouble, int, int, GLdouble*) pfglMap2d;
typedef void function(GLenum, float, float, int, int, float, float, int, int, float*) pfglMap2f;
typedef void function(GLenum, GLenum, GLdouble*) pfglGetMapdv;
typedef void function(GLenum, GLenum, float*) pfglGetMapfv;
typedef void function(GLenum, GLenum, int*) pfglGetMapiv;
typedef void function(GLdouble) pfglEvalCoord1d;
typedef void function(float) pfglEvalCoord1f;
typedef void function(GLdouble*) pfglEvalCoord1dv;
typedef void function(float*) pfglEvalCoord1fv;
typedef void function(GLdouble, GLdouble) pfglEvalCoord2d;
typedef void function(float, float) pfglEvalCoord2f;
typedef void function(GLdouble*) pfglEvalCoord2dv;
typedef void function(float*) pfglEvalCoord2fv;
typedef void function(int, GLdouble, GLdouble) pfglMapGrid1d;
typedef void function(int, float, float) pfglMapGrid1f;
typedef void function(int, GLdouble, GLdouble, int, GLdouble, GLdouble) pfglMapGrid2d;
typedef void function(int, float, float, int, float, float) pfglMapGrid2f;
typedef void function(int) pfglEvalPoint1;
typedef void function(int, int) pfglEvalPoint2;
typedef void function(GLenum, int, int) pfglEvalMesh1;
typedef void function(GLenum, int, int, int, int) pfglEvalMesh2;

pfglMap1d			glMap1d;
pfglMap1f			glMap1f;
pfglMap2d			glMap2d;
pfglMap2f			glMap2f;
pfglGetMapdv			glGetMapdv;
pfglGetMapfv			glGetMapfv;
pfglGetMapiv			glGetMapiv;
pfglEvalCoord1d			glEvalCoord1d;
pfglEvalCoord1f			glEvalCoord1f;
pfglEvalCoord1dv		glEvalCoord1dv;
pfglEvalCoord1fv		glEvalCoord1fv;
pfglEvalCoord2d			glEvalCoord2d;
pfglEvalCoord2f			glEvalCoord2f;
pfglEvalCoord2dv		glEvalCoord2dv;
pfglEvalCoord2fv		glEvalCoord2fv;
pfglMapGrid1d			glMapGrid1d;
pfglMapGrid1f			glMapGrid1f;
pfglMapGrid2d			glMapGrid2d;
pfglMapGrid2f			glMapGrid2f;
pfglEvalPoint1			glEvalPoint1;
pfglEvalPoint2			glEvalPoint2;
pfglEvalMesh1			glEvalMesh1;
pfglEvalMesh2			glEvalMesh2;

// Fog
typedef void function(GLenum, float) pfglFogf;
typedef void function(GLenum, int) pfglFogi;
typedef void function(GLenum, float*) pfglFogfv;
typedef void function(GLenum, int*) pfglFogiv;

pfglFogf			glFogf;
pfglFogi			glFogi;
pfglFogfv			glFogfv;
pfglFogiv			glFogiv;

// Selection and Feedback
typedef void function(GLsizei, GLenum, float*) pfglFeedbackBuffer;
typedef void function(float) pfglPassThrough;
typedef void function(GLsizei, uint*) pfglSelectBuffer;
typedef void function() pfglInitNames;
typedef void function(uint) pfglLoadName;
typedef void function(uint) pfglPushName;
typedef void function() pfglPopName;

pfglFeedbackBuffer		glFeedbackBuffer;
pfglPassThrough			glPassThrough;
pfglSelectBuffer		glSelectBuffer;
pfglInitNames			glInitNames;
pfglLoadName			glLoadName;
pfglPushName			glPushName;
pfglPopName			glPopName;

// OpenGL 1.1
typedef void function(GLsizei, uint*) pfglGenTextures;
typedef void function(GLsizei, uint*) pfglDeleteTextures;
typedef void function(GLenum, uint) pfglBindTexture;
typedef void function(GLsizei, uint*, GLclampf*) pfglPrioritizeTextures;
typedef bool function(GLsizei, uint*, bool*) pfglAreTexturesResident;
typedef bool function(uint) pfglIsTexture;
typedef void function(GLenum, int, int, GLsizei, GLenum, GLenum, void*) pfglTexSubImage1D;
typedef void function(GLenum, int, int, int, GLsizei, GLsizei, GLenum, GLenum, void*) pfglTexSubImage2D;
typedef void function(GLenum, int, GLenum internalformat, int, int, GLsizei, int) pfglCopyTexImage1D;
typedef void function(GLenum, int, GLenum internalformat, int, int, GLsizei, GLsizei, int) pfglCopyTexImage2D;
typedef void function(GLenum, int, int, int, int, GLsizei) pfglCopyTexSubImage1D;
typedef void function(GLenum, int, int, int, int, int, GLsizei, GLsizei) pfglCopyTexSubImage2D;

pfglGenTextures			glGenTextures;
pfglDeleteTextures		glDeleteTextures;
pfglBindTexture			glBindTexture;
pfglPrioritizeTextures		glPrioritizeTextures;
pfglAreTexturesResident		glAreTexturesResident;
pfglIsTexture			glIsTexture;
pfglTexSubImage1D		glTexSubImage1D;
pfglTexSubImage2D		glTexSubImage2D;
pfglCopyTexImage1D		glCopyTexImage1D;
pfglCopyTexImage2D		glCopyTexImage2D;
pfglCopyTexSubImage1D		glCopyTexSubImage1D;
pfglCopyTexSubImage2D		glCopyTexSubImage2D;

// OpenGL 1.2
typedef void function(GLenum, uint, uint, GLsizei, GLenum, void*) pfglDrawRangeElements;
typedef void function(GLenum, int, int, GLsizei, GLsizei, GLsizei, int, GLenum, GLenum, void*) pfglTexImage3D;
typedef void function(GLenum, int, int, int, int, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void*) pfglTexSubImage3D;
typedef void function(GLenum, int, int, int, int, int, int, GLsizei, GLsizei) pfglCopyTexSubImage3D;

pfglDrawRangeElements		glDrawRangeElements;
pfglTexImage3D			glTexImage3D;
pfglTexSubImage3D		glTexSubImage3D;
pfglCopyTexSubImage3D		glCopyTexSubImage3D;

// OpenGL 1.3
typedef void function(GLenum) pfglActiveTexture;
typedef void function(GLenum) pfglClientActiveTexture;
typedef void function(GLenum, GLdouble) pfglMultiTexCoord1d;
typedef void function(GLenum, GLdouble*) pfglMultiTexCoord1dv;
typedef void function(GLenum, float) pfglMultiTexCoord1f;
typedef void function(GLenum, float*) pfglMultiTexCoord1fv;
typedef void function(GLenum, int) pfglMultiTexCoord1i;
typedef void function(GLenum, int*) pfglMultiTexCoord1iv;
typedef void function(GLenum, GLshort) pfglMultiTexCoord1s;
typedef void function(GLenum, GLshort*) pfglMultiTexCoord1sv;
typedef void function(GLenum, GLdouble, GLdouble) pfglMultiTexCoord2d;
typedef void function(GLenum, GLdouble*) pfglMultiTexCoord2dv;
typedef void function(GLenum, float, float) pfglMultiTexCoord2f;
typedef void function(GLenum, float*) pfglMultiTexCoord2fv;
typedef void function(GLenum, int, int) pfglMultiTexCoord2i;
typedef void function(GLenum, int*) pfglMultiTexCoord2iv;
typedef void function(GLenum, GLshort, GLshort) pfglMultiTexCoord2s;
typedef void function(GLenum, GLshort*) pfglMultiTexCoord2sv;
typedef void function(GLenum, GLdouble, GLdouble, GLdouble) pfglMultiTexCoord3d;
typedef void function(GLenum, GLdouble*) pfglMultiTexCoord3dv;
typedef void function(GLenum, float, float, float) pfglMultiTexCoord3f;
typedef void function(GLenum, float*) pfglMultiTexCoord3fv;
typedef void function(GLenum, int, int, int) pfglMultiTexCoord3i;
typedef void function(GLenum, int*) pfglMultiTexCoord3iv;
typedef void function(GLenum, GLshort, GLshort, GLshort) pfglMultiTexCoord3s;
typedef void function(GLenum, GLshort*) pfglMultiTexCoord3sv;
typedef void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble) pfglMultiTexCoord4d;
typedef void function(GLenum, GLdouble*) pfglMultiTexCoord4dv;
typedef void function(GLenum, float, float, float, float) pfglMultiTexCoord4f;
typedef void function(GLenum, float*) pfglMultiTexCoord4fv;
typedef void function(GLenum, int, int, int, int) pfglMultiTexCoord4i;
typedef void function(GLenum, int*) pfglMultiTexCoord4iv;
typedef void function(GLenum, GLshort, GLshort, GLshort, GLshort) pfglMultiTexCoord4s;
typedef void function(GLenum, GLshort*) pfglMultiTexCoord4sv;
typedef void function(GLdouble[16]) pfglLoadTransposeMatrixd;
typedef void function(float[16]) pfglLoadTransposeMatrixf;
typedef void function(GLdouble[16]) pfglMultTransposeMatrixd;
typedef void function(float[16]) pfglMultTransposeMatrixf;
typedef void function(GLclampf, bool) pfglSampleCoverage;
typedef void function(GLenum, int, GLenum, GLsizei, int, GLsizei, void*) pfglCompressedTexImage1D;
typedef void function(GLenum, int, GLenum, GLsizei, GLsizei, int, GLsizei, void*) pfglCompressedTexImage2D;
typedef void function(GLenum, int, GLenum, GLsizei, GLsizei, GLsizei depth, int, GLsizei, void*) pfglCompressedTexImage3D;
typedef void function(GLenum, int, int, GLsizei, GLenum, GLsizei, void*) pfglCompressedTexSubImage1D;
typedef void function(GLenum, int, int, int, GLsizei, GLsizei, GLenum, GLsizei, void*) pfglCompressedTexSubImage2D;
typedef void function(GLenum, int, int, int, int, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, void*) pfglCompressedTexSubImage3D;
typedef void function(GLenum, int, void*) pfglGetCompressedTexImage;

pfglActiveTexture		glActiveTexture;
pfglClientActiveTexture		glClientActiveTexture;
pfglMultiTexCoord1d		glMultiTexCoord1d;
pfglMultiTexCoord1dv		glMultiTexCoord1dv;
pfglMultiTexCoord1f		glMultiTexCoord1f;
pfglMultiTexCoord1fv		glMultiTexCoord1fv;
pfglMultiTexCoord1i		glMultiTexCoord1i;
pfglMultiTexCoord1iv		glMultiTexCoord1iv;
pfglMultiTexCoord1s		glMultiTexCoord1s;
pfglMultiTexCoord1sv		glMultiTexCoord1sv;
pfglMultiTexCoord2d		glMultiTexCoord2d;
pfglMultiTexCoord2dv		glMultiTexCoord2dv;
pfglMultiTexCoord2f		glMultiTexCoord2f;
pfglMultiTexCoord2fv		glMultiTexCoord2fv;
pfglMultiTexCoord2i		glMultiTexCoord2i;
pfglMultiTexCoord2iv		glMultiTexCoord2iv;
pfglMultiTexCoord2s		glMultiTexCoord2s;
pfglMultiTexCoord2sv		glMultiTexCoord2sv;
pfglMultiTexCoord3d		glMultiTexCoord3d;
pfglMultiTexCoord3dv		glMultiTexCoord3dv;
pfglMultiTexCoord3f		glMultiTexCoord3f;
pfglMultiTexCoord3fv		glMultiTexCoord3fv;
pfglMultiTexCoord3i		glMultiTexCoord3i;
pfglMultiTexCoord3iv		glMultiTexCoord3iv;
pfglMultiTexCoord3s		glMultiTexCoord3s;
pfglMultiTexCoord3sv		glMultiTexCoord3sv;
pfglMultiTexCoord4d		glMultiTexCoord4d;
pfglMultiTexCoord4dv		glMultiTexCoord4dv;
pfglMultiTexCoord4f		glMultiTexCoord4f;
pfglMultiTexCoord4fv		glMultiTexCoord4fv;
pfglMultiTexCoord4i		glMultiTexCoord4i;
pfglMultiTexCoord4iv		glMultiTexCoord4iv;
pfglMultiTexCoord4s		glMultiTexCoord4s;
pfglMultiTexCoord4sv		glMultiTexCoord4sv;
pfglLoadTransposeMatrixd	glLoadTransposeMatrixd;
pfglLoadTransposeMatrixf	glLoadTransposeMatrixf;
pfglMultTransposeMatrixd	glMultTransposeMatrixd;
pfglMultTransposeMatrixf	glMultTransposeMatrixf;
pfglSampleCoverage		glSampleCoverage;
pfglCompressedTexImage1D	glCompressedTexImage1D;
pfglCompressedTexImage2D	glCompressedTexImage2D;
pfglCompressedTexImage3D	glCompressedTexImage3D;
pfglCompressedTexSubImage1D	glCompressedTexSubImage1D;
pfglCompressedTexSubImage2D	glCompressedTexSubImage2D;
pfglCompressedTexSubImage3D	glCompressedTexSubImage3D;
pfglGetCompressedTexImage	glGetCompressedTexImage;

// OpenGL 1.4
typedef void function(GLenum, GLenum, GLenum, GLenum) pfglBlendFuncSeparate;
typedef void function(float) pfglFogCoordf;
typedef void function(float*) pfglFogCoordfv;
typedef void function(GLdouble) pfglFogCoordd;
typedef void function(GLdouble*) pfglFogCoorddv;
typedef void function(GLenum, GLsizei,void*) pfglFogCoordPointer;
typedef void function(GLenum, int*, GLsizei*, GLsizei) pfglMultiDrawArrays;
typedef void function(GLenum, GLsizei*, GLenum, void**, GLsizei) pfglMultiDrawElements;
typedef void function(GLenum, float) pfglPointParameterf;
typedef void function(GLenum, float*) pfglPointParameterfv;
typedef void function(GLenum, int) pfglPointParameteri;
typedef void function(GLenum, int*) pfglPointParameteriv;
typedef void function(GLbyte, GLbyte, GLbyte) pfglSecondaryColor3b;
typedef void function(GLbyte*) pfglSecondaryColor3bv;
typedef void function(GLdouble, GLdouble, GLdouble) pfglSecondaryColor3d;
typedef void function(GLdouble*) pfglSecondaryColor3dv;
typedef void function(float, float, float) pfglSecondaryColor3f;
typedef void function(float*) pfglSecondaryColor3fv;
typedef void function(int, int, int) pfglSecondaryColor3i;
typedef void function(int*) pfglSecondaryColor3iv;
typedef void function(GLshort, GLshort, GLshort) pfglSecondaryColor3s;
typedef void function(GLshort*) pfglSecondaryColor3sv;
typedef void function(GLubyte, GLubyte, GLubyte) pfglSecondaryColor3ub;
typedef void function(GLubyte*) pfglSecondaryColor3ubv;
typedef void function(uint, uint, uint) pfglSecondaryColor3ui;
typedef void function(uint*) pfglSecondaryColor3uiv;
typedef void function(GLushort, GLushort, GLushort) pfglSecondaryColor3us;
typedef void function(GLushort*) pfglSecondaryColor3usv;
typedef void function(int, GLenum, GLsizei, void*) pfglSecondaryColorPointer;
typedef void function(GLdouble, GLdouble) pfglWindowPos2d;
typedef void function(GLdouble*) pfglWindowPos2dv;
typedef void function(float, float) pfglWindowPos2f;
typedef void function(float*) pfglWindowPos2fv;
typedef void function(int, int) pfglWindowPos2i;
typedef void function(int*) pfglWindowPos2iv;
typedef void function(GLshort, GLshort) pfglWindowPos2s;
typedef void function(GLshort*) pfglWindowPos2sv;
typedef void function(GLdouble, GLdouble, GLdouble) pfglWindowPos3d;
typedef void function(GLdouble*) pfglWindowPos3dv;
typedef void function(float, float, float) pfglWindowPos3f;
typedef void function(float*) pfglWindowPos3fv;
typedef void function(int, int, int) pfglWindowPos3i;
typedef void function(int*) pfglWindowPos3iv;
typedef void function(GLshort, GLshort, GLshort) pfglWindowPos3s;
typedef void function(GLshort*) pfglWindowPos3sv;

pfglBlendFuncSeparate		glBlendFuncSeparate;
pfglFogCoordf			glFogCoordf;
pfglFogCoordfv			glFogCoordfv;
pfglFogCoordd			glFogCoordd;
pfglFogCoorddv			glFogCoorddv;
pfglFogCoordPointer		glFogCoordPointer;
pfglMultiDrawArrays		glMultiDrawArrays;
pfglMultiDrawElements		glMultiDrawElements;
pfglPointParameterf		glPointParameterf;
pfglPointParameterfv		glPointParameterfv;
pfglPointParameteri		glPointParameteri;
pfglPointParameteriv		glPointParameteriv;
pfglSecondaryColor3b		glSecondaryColor3b;
pfglSecondaryColor3bv		glSecondaryColor3bv;
pfglSecondaryColor3d		glSecondaryColor3d;
pfglSecondaryColor3dv		glSecondaryColor3dv;
pfglSecondaryColor3f		glSecondaryColor3f;
pfglSecondaryColor3fv		glSecondaryColor3fv;
pfglSecondaryColor3i		glSecondaryColor3i;
pfglSecondaryColor3iv		glSecondaryColor3iv;
pfglSecondaryColor3s		glSecondaryColor3s;
pfglSecondaryColor3sv		glSecondaryColor3sv;
pfglSecondaryColor3ub		glSecondaryColor3ub;
pfglSecondaryColor3ubv		glSecondaryColor3ubv;
pfglSecondaryColor3ui		glSecondaryColor3ui;
pfglSecondaryColor3uiv		glSecondaryColor3uiv;
pfglSecondaryColor3us		glSecondaryColor3us;
pfglSecondaryColor3usv		glSecondaryColor3usv;
pfglSecondaryColorPointer	glSecondaryColorPointer;
pfglWindowPos2d			glWindowPos2d;
pfglWindowPos2dv		glWindowPos2dv;
pfglWindowPos2f			glWindowPos2f;
pfglWindowPos2fv		glWindowPos2fv;
pfglWindowPos2i			glWindowPos2i;
pfglWindowPos2iv		glWindowPos2iv;
pfglWindowPos2s			glWindowPos2s;
pfglWindowPos2sv		glWindowPos2sv;
pfglWindowPos3d			glWindowPos3d;
pfglWindowPos3dv		glWindowPos3dv;
pfglWindowPos3f			glWindowPos3f;
pfglWindowPos3fv		glWindowPos3fv;
pfglWindowPos3i			glWindowPos3i;
pfglWindowPos3iv		glWindowPos3iv;
pfglWindowPos3s			glWindowPos3s;
pfglWindowPos3sv		glWindowPos3sv;

// OpenGL 1.5
typedef void function(GLsizei, uint*) pfglGenQueries;
typedef void function(GLsizei,uint*) pfglDeleteQueries;
typedef bool function(uint) pfglIsQuery;
typedef void function(GLenum, uint) pfglBeginQuery;
typedef void function(GLenum) pfglEndQuery;
typedef void function(GLenum, GLenum, int*) pfglGetQueryiv;
typedef void function(uint, GLenum, int*) pfglGetQueryObjectiv;
typedef void function(uint, GLenum, uint*) pfglGetQueryObjectuiv;
typedef void function(GLenum, uint) pfglBindBuffer;
typedef void function(GLsizei, uint*) pfglDeleteBuffers;
typedef void function(GLsizei, uint*) pfglGenBuffers;
typedef bool function(uint) pfglIsBuffer;
typedef void function(GLenum, GLsizeiptr, void*, GLenum) pfglBufferData;
typedef void function(GLenum, intptr, GLsizeiptr,void*) pfglBufferSubData;
typedef void function(GLenum, intptr, GLsizeiptr, void*) pfglGetBufferSubData;
typedef void* function(GLenum, GLenum) pfglMapBuffer;
typedef bool function(GLenum) pfglUnmapBuffer;
typedef void function(GLenum, GLenum, int*) pfglGetBufferParameteriv;
typedef void function(GLenum, GLenum, void**) pfglGetBufferPointerv;

pfglGenQueries			glGenQueries;
pfglDeleteQueries		glDeleteQueries;
pfglIsQuery			glIsQuery;
pfglBeginQuery			glBeginQuery;
pfglEndQuery			glEndQuery;
pfglGetQueryiv			glGetQueryiv;
pfglGetQueryObjectiv		glGetQueryObjectiv;
pfglGetQueryObjectuiv		glGetQueryObjectuiv;
pfglBindBuffer			glBindBuffer;
pfglDeleteBuffers		glDeleteBuffers;
pfglGenBuffers			glGenBuffers;
pfglIsBuffer			glIsBuffer;
pfglBufferData			glBufferData;
pfglBufferSubData		glBufferSubData;
pfglGetBufferSubData		glGetBufferSubData;
pfglMapBuffer			glMapBuffer;
pfglUnmapBuffer			glUnmapBuffer;
pfglGetBufferParameteriv	glGetBufferParameteriv;
pfglGetBufferPointerv		glGetBufferPointerv;

// OpenGL 2.0
typedef void function(GLenum, GLenum) pfglBlendEquationSeparate;
typedef void function(GLsizei, GLenum*) pfglDrawBuffers;
typedef void function(GLenum, GLenum, GLenum, GLenum) pfglStencilOpSeparate;
typedef void function(GLenum, GLenum, int, uint) pfglStencilFuncSeparate;
typedef void function(GLenum, uint) pfglStencilMaskSeparate;
typedef void function(uint, uint) pfglAttachShader;
typedef void function(uint, uint, GLchar*) pfglBindAttribLocation;
typedef void function(uint) pfglCompileShader;
typedef uint function() pfglCreateProgram;
typedef uint function(GLenum) pfglCreateShader;
typedef void function(uint) pfglDeleteProgram;
typedef void function(uint) pfglDeleteShader;
typedef void function(uint, uint) pfglDetachShader;
typedef void function(uint) pfglDisableVertexAttribArray;
typedef void function(uint) pfglEnableVertexAttribArray;
typedef void function(uint, uint, GLsizei, GLsizei*, int*, GLenum*, GLchar*) pfglGetActiveAttrib;
typedef void function(uint, uint, GLsizei, GLsizei*, int*, GLenum*, GLchar*) pfglGetActiveUniform;
typedef void function(uint, GLsizei, GLsizei*, uint*) pfglGetAttachedShaders;
typedef int function(uint, GLchar*) pfglGetAttribLocation;
typedef void function(uint, GLenum, int*) pfglGetProgramiv;
typedef void function(uint, GLsizei, GLsizei*, GLchar*) pfglGetProgramInfoLog;
typedef void function(uint, GLenum, int *) pfglGetShaderiv;
typedef void function(uint, GLsizei, GLsizei*, GLchar*) pfglGetShaderInfoLog;
typedef void function(uint, GLsizei, GLsizei*, GLchar*) pfglGetShaderSource;
typedef int function(uint, GLchar*) pfglGetUniformLocation;
typedef void function(uint, int, float*) pfglGetUniformfv;
typedef void function(uint, int, int*) pfglGetUniformiv;
typedef void function(uint, GLenum, GLdouble*) pfglGetVertexAttribdv;
typedef void function(uint, GLenum, float*) pfglGetVertexAttribfv;
typedef void function(uint, GLenum, int*) pfglGetVertexAttribiv;
typedef void function(uint, GLenum, void**) pfglGetVertexAttribPointerv;
typedef bool function(uint) pfglIsProgram;
typedef bool function(uint) pfglIsShader;
typedef void function(uint) pfglLinkProgram;
typedef void function(uint, GLsizei, GLchar**, int*) pfglShaderSource;
typedef void function(uint) pfglUseProgram;
typedef void function(int, float) pfglUniform1f;
typedef void function(int, float, float) pfglUniform2f;
typedef void function(int, float, float, float) pfglUniform3f;
typedef void function(int, float, float, float, float) pfglUniform4f;
typedef void function(int, int) pfglUniform1i;
typedef void function(int, int, int) pfglUniform2i;
typedef void function(int, int, int, int) pfglUniform3i;
typedef void function(int, int, int, int, int) pfglUniform4i;
typedef void function(int, GLsizei, float*) pfglUniform1fv;
typedef void function(int, GLsizei, float*) pfglUniform2fv;
typedef void function(int, GLsizei, float*) pfglUniform3fv;
typedef void function(int, GLsizei, float*) pfglUniform4fv;
typedef void function(int, GLsizei, int*) pfglUniform1iv;
typedef void function(int, GLsizei, int*) pfglUniform2iv;
typedef void function(int, GLsizei, int*) pfglUniform3iv;
typedef void function(int, GLsizei, int*) pfglUniform4iv;
typedef void function(int, GLsizei, bool, float*) pfglUniformMatrix2fv;
typedef void function(int, GLsizei, bool, float*) pfglUniformMatrix3fv;
typedef void function(int, GLsizei, bool, float*) pfglUniformMatrix4fv;
typedef void function(uint) pfglValidateProgram;
typedef void function(uint, GLdouble) pfglVertexAttrib1d;
typedef void function(uint, GLdouble*) pfglVertexAttrib1dv;
typedef void function(uint, float) pfglVertexAttrib1f;
typedef void function(uint, float*) pfglVertexAttrib1fv;
typedef void function(uint, GLshort) pfglVertexAttrib1s;
typedef void function(uint, GLshort*) pfglVertexAttrib1sv;
typedef void function(uint, GLdouble, GLdouble) pfglVertexAttrib2d;
typedef void function(uint, GLdouble*) pfglVertexAttrib2dv;
typedef void function(uint, float, float) pfglVertexAttrib2f;
typedef void function(uint, float*) pfglVertexAttrib2fv;
typedef void function(uint, GLshort, GLshort) pfglVertexAttrib2s;
typedef void function(uint, GLshort*) pfglVertexAttrib2sv;
typedef void function(uint, GLdouble, GLdouble, GLdouble) pfglVertexAttrib3d;
typedef void function(uint, GLdouble*) pfglVertexAttrib3dv;
typedef void function(uint, float, float, float) pfglVertexAttrib3f;
typedef void function(uint, float*) pfglVertexAttrib3fv;
typedef void function(uint, GLshort, GLshort, GLshort) pfglVertexAttrib3s;
typedef void function(uint, GLshort*) pfglVertexAttrib3sv;
typedef void function(uint, GLbyte*) pfglVertexAttrib4Nbv;
typedef void function(uint, int*) pfglVertexAttrib4Niv;
typedef void function(uint, GLshort*) pfglVertexAttrib4Nsv;
typedef void function(uint, GLubyte, GLubyte, GLubyte, GLubyte) pfglVertexAttrib4Nub;
typedef void function(uint, GLubyte*) pfglVertexAttrib4Nubv;
typedef void function(uint, uint*) pfglVertexAttrib4Nuiv;
typedef void function(uint, GLushort*) pfglVertexAttrib4Nusv;
typedef void function(uint, GLbyte*) pfglVertexAttrib4bv;
typedef void function(uint, GLdouble, GLdouble, GLdouble, GLdouble) pfglVertexAttrib4d;
typedef void function(uint, GLdouble*) pfglVertexAttrib4dv;
typedef void function(uint, float, float, float, float) pfglVertexAttrib4f;
typedef void function(uint, float*) pfglVertexAttrib4fv;
typedef void function(uint, int*) pfglVertexAttrib4iv;
typedef void function(uint, GLshort, GLshort, GLshort, GLshort) pfglVertexAttrib4s;
typedef void function(uint, GLshort*) pfglVertexAttrib4sv;
typedef void function(uint, GLubyte*) pfglVertexAttrib4ubv;
typedef void function(uint, uint*) pfglVertexAttrib4uiv;
typedef void function(uint, GLushort*) pfglVertexAttrib4usv;
typedef void function(uint, int, GLenum, bool, GLsizei, void*) pfglVertexAttribPointer;

pfglBlendEquationSeparate	glBlendEquationSeparate;
pfglDrawBuffers			glDrawBuffers;
pfglStencilOpSeparate		glStencilOpSeparate;
pfglStencilFuncSeparate		glStencilFuncSeparate;
pfglStencilMaskSeparate		glStencilMaskSeparate;
pfglAttachShader		glAttachShader;
pfglBindAttribLocation		glBindAttribLocation;
pfglCompileShader		glCompileShader;
pfglCreateProgram		glCreateProgram;
pfglCreateShader		glCreateShader;
pfglDeleteProgram		glDeleteProgram;
pfglDeleteShader		glDeleteShader;
pfglDetachShader		glDetachShader;
pfglDisableVertexAttribArray	glDisableVertexAttribArray;
pfglEnableVertexAttribArray	glEnableVertexAttribArray;
pfglGetActiveAttrib		glGetActiveAttrib;
pfglGetActiveUniform		glGetActiveUniform;
pfglGetAttachedShaders		glGetAttachedShaders;
pfglGetAttribLocation		glGetAttribLocation;
pfglGetProgramiv		glGetProgramiv;
pfglGetProgramInfoLog		glGetProgramInfoLog;
pfglGetShaderiv			glGetShaderiv;
pfglGetShaderInfoLog		glGetShaderInfoLog;
pfglGetShaderSource		glGetShaderSource;
pfglGetUniformLocation		glGetUniformLocation;
pfglGetUniformfv		glGetUniformfv;
pfglGetUniformiv		glGetUniformiv;
pfglGetVertexAttribdv		glGetVertexAttribdv;
pfglGetVertexAttribfv		glGetVertexAttribfv;
pfglGetVertexAttribiv		glGetVertexAttribiv;
pfglGetVertexAttribPointerv	glGetVertexAttribPointerv;
pfglIsProgram			glIsProgram;
pfglIsShader			glIsShader;
pfglLinkProgram			glLinkProgram;
pfglShaderSource		glShaderSource;
pfglUseProgram			glUseProgram;
pfglUniform1f			glUniform1f;
pfglUniform2f			glUniform2f;
pfglUniform3f			glUniform3f;
pfglUniform4f			glUniform4f;
pfglUniform1i			glUniform1i;
pfglUniform2i			glUniform2i;
pfglUniform3i			glUniform3i;
pfglUniform4i			glUniform4i;
pfglUniform1fv			glUniform1fv;
pfglUniform2fv			glUniform2fv;
pfglUniform3fv			glUniform3fv;
pfglUniform4fv			glUniform4fv;
pfglUniform1iv			glUniform1iv;
pfglUniform2iv			glUniform2iv;
pfglUniform3iv			glUniform3iv;
pfglUniform4iv			glUniform4iv;
pfglUniformMatrix2fv		glUniformMatrix2fv;
pfglUniformMatrix3fv		glUniformMatrix3fv;
pfglUniformMatrix4fv		glUniformMatrix4fv;
pfglValidateProgram		glValidateProgram;
pfglVertexAttrib1d		glVertexAttrib1d;
pfglVertexAttrib1dv		glVertexAttrib1dv;
pfglVertexAttrib1f		glVertexAttrib1f;
pfglVertexAttrib1fv		glVertexAttrib1fv;
pfglVertexAttrib1s		glVertexAttrib1s;
pfglVertexAttrib1sv		glVertexAttrib1sv;
pfglVertexAttrib2d		glVertexAttrib2d;
pfglVertexAttrib2dv		glVertexAttrib2dv;
pfglVertexAttrib2f		glVertexAttrib2f;
pfglVertexAttrib2fv		glVertexAttrib2fv;
pfglVertexAttrib2s		glVertexAttrib2s;
pfglVertexAttrib2sv		glVertexAttrib2sv;
pfglVertexAttrib3d		glVertexAttrib3d;
pfglVertexAttrib3dv		glVertexAttrib3dv;
pfglVertexAttrib3f		glVertexAttrib3f;
pfglVertexAttrib3fv		glVertexAttrib3fv;
pfglVertexAttrib3s		glVertexAttrib3s;
pfglVertexAttrib3sv		glVertexAttrib3sv;
pfglVertexAttrib4Nbv		glVertexAttrib4Nbv;
pfglVertexAttrib4Niv		glVertexAttrib4Niv;
pfglVertexAttrib4Nsv		glVertexAttrib4Nsv;
pfglVertexAttrib4Nub		glVertexAttrib4Nub;
pfglVertexAttrib4Nubv		glVertexAttrib4Nubv;
pfglVertexAttrib4Nuiv		glVertexAttrib4Nuiv;
pfglVertexAttrib4Nusv		glVertexAttrib4Nusv;
pfglVertexAttrib4bv		glVertexAttrib4bv;
pfglVertexAttrib4d		glVertexAttrib4d;
pfglVertexAttrib4dv		glVertexAttrib4dv;
pfglVertexAttrib4f		glVertexAttrib4f;
pfglVertexAttrib4fv		glVertexAttrib4fv;
pfglVertexAttrib4iv		glVertexAttrib4iv;
pfglVertexAttrib4s		glVertexAttrib4s;
pfglVertexAttrib4sv		glVertexAttrib4sv;
pfglVertexAttrib4ubv		glVertexAttrib4ubv;
pfglVertexAttrib4uiv		glVertexAttrib4uiv;
pfglVertexAttrib4usv		glVertexAttrib4usv;
pfglVertexAttribPointer		glVertexAttribPointer;
}